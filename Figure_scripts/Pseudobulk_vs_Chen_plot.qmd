---
title: "Pseudobulk_vs_Chen"
format: html
editor: visual
---

### This notebook is for generating a comparison between the experimental results of Chen et al. and the predictions for the CTL subjects in my data.

Load packages

```{r}
library(tidyverse)
library(NMOF)
```

Define functions for optimization

```{r}
cosine_distance <- function(xs, ys) {
  1 - cos(xs - ys)
}

gridfunc = function(param, true_phases, pred_phases){
  shift_from_original = param[1]
  mean(cosine_distance(true_phases, (pred_phases + shift_from_original)%%(2*pi))^2)
}

find_best_forward_backward_alignment_grid_search <- function(l1, l2) {
  true_phases = l1[!is.na(l2)]
  pred_phases = l2[!is.na(l2)]
  
  forward_search = gridSearch(gridfunc, levels = list(x =  seq(-2*pi, 2*pi, by = .05)), method = 'multicore', mc.control = list(mc.cores = 10), true_phases = true_phases, pred_phases = pred_phases)
  forward_min = forward_search$minfun
  forward_shift = forward_search$minlevel
  forward_list_of_phases = (pred_phases+forward_shift)%%(2*pi)
  
  pred_phases = (-l2[!is.na(l2)])%%(2*pi)
  
  reverse_search = gridSearch(gridfunc, levels = list(x =  seq(-2*pi, 2*pi, by = .05)), method = 'multicore', mc.control = list(mc.cores = 10), true_phases = true_phases, pred_phases = pred_phases)
  reverse_min = reverse_search$minfun
  reverse_shift = reverse_search$minlevel
  reverse_list_of_phases = (pred_phases+reverse_shift)%%(2*pi)
  
  if(forward_min < reverse_min) {
    return(forward_list_of_phases)
  }
  return(reverse_list_of_phases)
}

```

Read in Chen et al. ([**https://doi.org/10.1073/pnas.1508249112**](https://doi.org/10.1073/pnas.1508249112)**)** data

```{r}
library(openxlsx)

# URL of the file you want to download
url <- "https://www.pnas.org/doi/suppl/10.1073/pnas.1508249112/suppl_file/pnas.1508249112.sd01.xlsx"

# # Temporary file path to save the downloaded file
url = "~/Downloads/pnas.1508249112.sd01 (1).xlsx"

# Print the path to the downloaded file
Chen_acrophases =  read.xlsx(url,sheet=1)
#keep genes with significance < 0.2
Chen_acrophases = dplyr::filter(Chen_acrophases, BA11.qval  < 0.2) %>% dplyr::select(Gene, BA11.Peak)
#rename C1orf51 -> CIART
Chen_acrophases[1,1] = "CIART"
#Convert gene acrophase to radians
Chen_acrophases$BA11.Peak_mod = ((Chen_acrophases$BA11.Peak) *pi / 12) %% (2*pi)
```

Get Human Remapping dictionary:

```{r}
human_symb_remap = read.csv("https://data.broadinstitute.org/gsea-msigdb/msigdb/annotations/human/Human_Gene_Symbol_with_Remapping_MSigDB.v2023.2.Hs.chip",sep="\t")

check_for_alias <- function(gene_list){
  translation_dict = filter(human_symb_remap, Probe.Set.ID %in% gene_list)
  
  }
trans_dict = check_for_alias(Chen_acrophases$Gene)
Chen_acrophases$Gene_symbol_remapped = trans_dict$Gene.Symbol[match(Chen_acrophases$Gene, trans_dict$Probe.Set.ID)]
```

Read in predicted gene acrophases from my data:

```{r}
pseudobulk_acros = read_csv("../Cyclops_ordering/downstream_output_Pseudobulk_All/cosinor_results_CTL.csv", show_col_types = F)

# Which genes are only found (in rosmap expression data) with remapping?
genes_found_remapping_only_idx = which(Chen_acrophases$Gene_symbol_remapped %in% pseudobulk_acros$Gene_Symbols & !(Chen_acrophases$Gene %in% pseudobulk_acros$Gene_Symbols))

Chen_acrophases$Symbol_final = Chen_acrophases$Gene
Chen_acrophases$Symbol_final[genes_found_remapping_only_idx] = Chen_acrophases$Gene_symbol_remapped[genes_found_remapping_only_idx]

#filter out genes in my data that are significantly cycling and also in Chen list:
tmp = dplyr::filter(pseudobulk_acros, (Gene_Symbols %in% Chen_acrophases$Symbol_final) & as.numeric(BHQ) < 0.1 & as.numeric(amp_ratio) > 0.1) %>% dplyr::select(Gene_Symbols, acrophase, BHQ)


#merge the Chen info with my info
df = merge(Chen_acrophases, tmp, by.x = "Symbol_final", by.y = "Gene_Symbols" )

df$shifted_phase = find_best_forward_backward_alignment_grid_search(df$BA11.Peak_mod, as.numeric(df$acrophase))

```

### Plot

```{r}
 core_clock = toupper(c("Arntl", "Clock", "Npas2", "Nr1d1", "Bhlhe41",   "Nr1d2", "Dbp", "Ciart", "Per1", "Per3", "Tef", "Hlf", "Cry2",            "Per2", "Cry1", "Rorc", "Nfil3"))
  
ggplot(df, aes(x = BA11.Peak_mod, y = shifted_phase, label = Gene) )+
  geom_point(shape = 16, size = 2, alpha = .7,color = "#0091ff")+
  xlim(0, 2*pi)+
  ylim(0, 2*pi)+
  # geom_text(hjust=0, vjust=0)+
  ggrepel::geom_text_repel(data = subset(df, Gene %in% core_clock),
                  aes(label = Gene),
                  box.padding = 0.5, 
                  point.padding = 0.5)+
  ylab("Predicted Gene Acrophase in ROSMAP")+
  xlab("Measured Gene Acrophase from Chen et al.")+
  scale_x_continuous(breaks = seq(0, 2 * pi, by = pi/2),
                  labels = c("0", expression(pi/2), expression(pi),                           expression(3*pi/2), expression(2*pi))) +
  scale_y_continuous(breaks = seq(0, 2 * pi, by = pi/2),
                  labels = c("0", expression(pi/2), expression(pi),                           expression(3*pi/2), expression(2*pi)))+
  theme_minimal()
```
