---
title: "Heatmap_pathway_rhythms"
format: html
editor: visual
---

Read in TMM and cyclops prediction:

```{r}
library(tidyverse)
library(gridExtra)
#path to cyclops ordering
cyclops_fit= "../Cyclops_ordering/Fits/Fit_Output_2024-02-05T14_13_00.csv"

#I want to arrange the heatmaps by acrophase so I need this
CTL_cycling_file = "../Cyclops_ordering/downstream_output_Exc3_5/cosinor_results_CTL.csv"
# CTL_cycling_file = "../Cyclops_ordering/downstream_output_Inhib_All/cosinor_results_CTL.csv"

#path to normalized counts
path_to_tmm_file = "../normed_counts/ExcSubtypes3and5_FiltByExprDefault_TMM_CombatAdjusted.csv"


cyc_pred = read_csv(cyclops_fit, show_col_types = F) %>% arrange(Phase)
tmm = read_csv(path_to_tmm_file, show_col_types = F)
CTL_cycling_res = read_csv(CTL_cycling_file, show_col_types = F)

```

Get Kegg Ribosome pathway:

```{r}
setwd("../Analysis_scripts/MsigDB_gmts_for_GSEA/")
Kegg = read.delim("c2.cp.kegg.v2023.1.Hs.symbols.gmt", sep = '\t', header= F)
# pathway_name = "OxPhos"
pathway_name = "Ribosome"
pathway_terms = Kegg[grep("RIBOSOME", Kegg$V1), -c(1,2)] %>% unname %>% unlist
# pathway_terms = Kegg[grep("KEGG_OXIDATIVE_PHOSPHORYLATION", Kegg$V1), -c(1,2)] %>% unname %>% unlist

```

We want the genes to be z-normed including both conditions so that differences in amplitude can be seen:

```{r}
znorm = function(x){
  x = as.numeric(x)
  m = mean(x)
  s = sd(x)
  return((x-m)/s)
}
```

```{r}
#create breaks of (0, 2pi]
cyc_pred$interval = cut(cyc_pred$Phase,breaks = seq(0, 2*pi, by = pi/2) )

#select genes from tmm in pathway, convert to numeric, transpose to subsXgenes
pathway_tmm = tmm[tmm$Gene_Symbols %in% pathway_terms, ]  %>% column_to_rownames(var = "Gene_Symbols") %>% mutate_if(is.character,as.numeric) %>% t %>% as.data.frame %>% rownames_to_column(var = "ID")

# Apply z_normalize to each column of my_tibble
norm_pathway_tmm <- pathway_tmm %>%
  mutate_at(vars(-1), znorm)

#merge pathway_tmm with cyclops preds
norm_pathway_tmm_df = merge(select(cyc_pred, ID, interval, Phase, Covariate_D), norm_pathway_tmm, by = "ID") %>% arrange(Phase) #%>% filter(Covariate_D == condition)

#remove Phase and only keep the binned phase called "interval"
norm_pathway_tmm_CTL = norm_pathway_tmm_df %>% column_to_rownames(var = "ID") %>% filter(Covariate_D == "cond_0") %>% select(!c(Phase, Covariate_D))

norm_pathway_tmm_AD = norm_pathway_tmm_df %>% column_to_rownames(var = "ID") %>% filter(Covariate_D == "cond_1") %>% select(!c(Phase, Covariate_D))

#For each gene, for each time interval, get the median expression for the interval
heatmap_data_CTL = norm_pathway_tmm_CTL %>% group_by(interval) %>%
  summarise_all(median) %>% column_to_rownames(var = "interval")
heatmap_data_CTL = t(heatmap_data_CTL)

heatmap_data_AD = norm_pathway_tmm_AD %>% group_by(interval) %>%
  summarise_all(median) %>% column_to_rownames(var = "interval")
heatmap_data_AD = t(heatmap_data_AD)

#arrange rows of heatmap_data to be in order of acrophase
row_order = order(CTL_cycling_res$acrophase[ match(rownames(heatmap_data_CTL), CTL_cycling_res$Gene_Symbols)])

heatmap_data_CTL = heatmap_data_CTL[row_order, ]
heatmap_data_AD = heatmap_data_AD[row_order, ]
norm_pathway_tmm_AD %>% group_by(interval) %>%summarise(n = n())
norm_pathway_tmm_CTL %>% group_by(interval) %>%summarise(n = n())

```

```{r}
library(gplots)

library(circlize)
col_fun = colorRamp2(c(-1, 0, 1), c("blue", "black", "yellow"))


# times = as.character(seq(0, 24, by = 6))
times = c(expression(pi/2), expression(pi), expression(3*pi/2), expression(2*pi))
# p1 = heatmap.2(as.matrix(heatmap_data_CTL), col = col_fun, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway CTL")
# 
# p2 = heatmap.2(as.matrix(heatmap_data_AD), col = cm.colors, tracecol = "black", trace = "none", dendrogram = "none", scale ="none", Rowv = NA, Colv = NA, labCol = times, main = "KEGG Ribosome Pathway AD")

library(ComplexHeatmap)
row_names_fontzise = gpar(fontsize = 10)
grid.newpage()
pushViewport(viewport(layout = grid.layout(nr = 1, nc = 3)))
pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
draw(Heatmap(as.matrix(heatmap_data_CTL), col = col_fun, column_title = paste("KEGG", pathway_name, "CTL"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
upViewport()

pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
draw(Heatmap(as.matrix(heatmap_data_AD), col = col_fun, column_title = paste("KEGG", pathway_name, "AD"), show_heatmap_legend = FALSE, cluster_columns = F, cluster_rows = F, column_labels = times, row_names_side = "left", row_names_gp = row_names_fontzise), newpage = FALSE)
upViewport()


lgd = Legend(at = c( -1, 0, 1), col_fun = col_fun, title = "Z-Normed\nExpression", title_position = "topleft", legend_height = unit(50, "mm"),size = unit(12, "mm"))

pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 3))
grid.draw(lgd)
upViewport()

upViewport()
```
