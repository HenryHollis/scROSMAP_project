rosmap_clin_path = "~/Box Sync/Henry_stuff/AD_project/scROSMAP/Meta_data/cleaned_rosmap_meta_cogdxConds.csv")
rosmap_clin = read_csv(rosmap_clin_path)
rosmap_clin = rosmap_clin[ na.exclude(match(cyc_pred$ID, rosmap_clin$projid)),]
rosmap_clin = rosmap_clin %>%
mutate(braaksc_bin = cut(braaksc, c(0, 3, 5, 7), right = F))
rosmap_clin = rosmap_clin %>%
mutate(ceradsc_bin = cut(ceradsc, c(1, 3, 5), right = F))
rosmap_clin$apoe_ordinal  = 1
rosmap_clin$apoe_ordinal[rosmap_clin$apoe_genotype == 34 | rosmap_clin$apoe_genotype == 24] = 2
rosmap_clin$apoe_ordinal[rosmap_clin$apoe_genotype == 44 ] = 3
rosmap_clin$apoe_ordinal[is.na(rosmap_clin$apoe_genotype) ] = NA
###############
###############
cyc_pred_merged = merge(cyc_pred, rosmap_clin, by.x = "ID", by.y = "projid", y.keep = F)
preds = cyc_pred_merged %>% dplyr::filter(Covariate_D == "cond_1") %>% dplyr::select(ID, Phase, cogdx, ceradsc_bin) %>% arrange(Phase)
gene = tmm[which(tmm$gene_names %in% seedlist), -1] # "gene" is tmm with only seedlist subset
gene1 = t(gene[,na.exclude(match(preds$ID, colnames(gene)))])  #the transpose, subjects x genes for tidyverse purposes
colnames(gene1) =  unname(unlist(tmm[which(tmm$gene_names %in% seedlist), 1]))  #add the gene names to the columns of gene1
cog = as.factor(preds$cogdx[match(rownames(gene1), preds$ID)])      # cogdx score 4 or 5
cerad = as.factor(preds$ceradsc_bin[match(rownames(gene1), preds$ID)])
times = as.numeric(preds$Phase[match(rownames(gene1), preds$ID)]) #in the case that I have CYCLOPS preds for subs not in tmm...
all_genes = foreach (gene_i = 1:ncol(gene1), .combine = rbind) %do%{
gexp1 = as.numeric(unlist(gene1[,gene_i]))
times1 = times
I_local_cog = cog
I_local_cerad = cerad
rm_NA = which(is.na(gexp1))
if (length(rm_NA) <= floor(.7*nrow(gene1))){ #only proceed if >70% of data are not NA
if(!is_empty(rm_NA)){
gexp1 = gexp1[-rm_NA]
times1 = times1[-rm_NA]
I_local_cog = cog[-rm_NA]
I_local_cerad = cerad[-rm_NA]
}
gexp1 = blunt_outliers(gexp1)
partial_model1 = lm(gexp1 ~ sin(times1) + cos(times1) + I_local_cog + 0)
full_model1 = lm(gexp1 ~ I_local_cog*sin(times1) + I_local_cog*cos(times1) + I_local_cog + 0)
anova_results1 = anova(partial_model1, full_model1)
p_cog = anova_results1$`Pr(>F)`[2]
Gene_Symbols = colnames(gene1)[gene_i]
sin_coeff = full_model1[["coefficients"]][["sin(times1)"]]
cos_coeff = full_model1[["coefficients"]][["cos(times1)"]]
sin_coeff2 = full_model1[["coefficients"]][["I_local_cog5:sin(times1)"]] + sin_coeff
cos_coeff2 = full_model1[["coefficients"]][["I_local_cog5:cos(times1)"]] + cos_coeff
acrophase_cog4 = atan2(sin_coeff, cos_coeff) %% (2*pi)
amplitude_cog4= sqrt((sin_coeff^2) + (cos_coeff^2))
acrophase_cog5 = atan2(sin_coeff2, cos_coeff2) %% (2*pi)
amplitude_cog5= sqrt((sin_coeff2^2) + (cos_coeff2^2))
####### ceradsc_binned #########
partial_model_cerad = lm(gexp1 ~ sin(times1) + cos(times1) + I_local_cerad + 0)
full_model_cerad = lm(gexp1 ~ I_local_cerad*sin(times1) + I_local_cerad*cos(times1) + I_local_cerad + 0)
anova_results_cerad = anova(partial_model_cerad, full_model_cerad)
p_cerad = anova_results_cerad$`Pr(>F)`[2]
sin_coeff_cerad = full_model_cerad[["coefficients"]][["sin(times1)"]]
cos_coeff_cerad = full_model_cerad[["coefficients"]][["cos(times1)"]]
sin_coeff2_cerad = full_model_cerad[["coefficients"]][["I_local_cerad:sin(times1)"]] + sin_coeff_cerad
cos_coeff2_cerad = full_model_cerad[["coefficients"]][["I_local_cerad:cos(times1)"]] + cos_coeff_cerad
acrophase_cerad1to2 = atan2(sin_coeff_cerad, cos_coeff_cerad) %% (2*pi)
amplitude_cerad1to2 = sqrt((sin_coeff_cerad^2) + (cos_coeff_cerad^2))
acrophase_cerad3to5 = atan2(sin_coeff2_cerad, cos_coeff2_cerad) %% (2*pi)
amplitude_cerad3to5= sqrt((sin_coeff2_cerad^2) + (cos_coeff2_cerad^2))
info = c( Gene_Symbols, p_cog, p_cerad, acrophase_cog4, acrophase_cog5,
acrophase_cerad1to2, acrophase_cerad3to5, amplitude_cog4,
amplitude_cog5, amplitude_cerad1to2, amplitude_cerad3to5)
return(info)
}
return(cbind( colnames(gene1)[gene_i], NA,NA, NA, NA, NA, NA, NA, NA, NA, NA))
}
gene_i = 1
gexp1 = as.numeric(unlist(gene1[,gene_i]))
times1 = times
I_local_cog = cog
I_local_cerad = cerad
rm_NA = which(is.na(gexp1))
if(!is_empty(rm_NA)){
gexp1 = gexp1[-rm_NA]
times1 = times1[-rm_NA]
I_local_cog = cog[-rm_NA]
I_local_cerad = cerad[-rm_NA]
}
gexp1 = blunt_outliers(gexp1)
partial_model1 = lm(gexp1 ~ sin(times1) + cos(times1) + I_local_cog + 0)
full_model1 = lm(gexp1 ~ I_local_cog*sin(times1) + I_local_cog*cos(times1) + I_local_cog + 0)
anova_results1 = anova(partial_model1, full_model1)
p_cog = anova_results1$`Pr(>F)`[2]
Gene_Symbols = colnames(gene1)[gene_i]
sin_coeff = full_model1[["coefficients"]][["sin(times1)"]]
cos_coeff = full_model1[["coefficients"]][["cos(times1)"]]
sin_coeff2 = full_model1[["coefficients"]][["I_local_cog5:sin(times1)"]] + sin_coeff
cos_coeff2 = full_model1[["coefficients"]][["I_local_cog5:cos(times1)"]] + cos_coeff
acrophase_cog4 = atan2(sin_coeff, cos_coeff) %% (2*pi)
amplitude_cog4= sqrt((sin_coeff^2) + (cos_coeff^2))
acrophase_cog5 = atan2(sin_coeff2, cos_coeff2) %% (2*pi)
amplitude_cog5= sqrt((sin_coeff2^2) + (cos_coeff2^2))
####### ceradsc_binned #########
partial_model_cerad = lm(gexp1 ~ sin(times1) + cos(times1) + I_local_cerad + 0)
full_model_cerad = lm(gexp1 ~ I_local_cerad*sin(times1) + I_local_cerad*cos(times1) + I_local_cerad + 0)
anova_results_cerad = anova(partial_model_cerad, full_model_cerad)
p_cerad = anova_results_cerad$`Pr(>F)`[2]
sin_coeff_cerad = full_model_cerad[["coefficients"]][["sin(times1)"]]
cos_coeff_cerad = full_model_cerad[["coefficients"]][["cos(times1)"]]
sin_coeff2_cerad = full_model_cerad[["coefficients"]][["I_local_cerad:sin(times1)"]] + sin_coeff_cerad
View(full_model_cerad)
diff_rhyth_AD_severity = function(cyc_pred, tmm, seedlist, rosmap_clin_path){
##### read in ROSMAP clin ####
rosmap_clin = read_csv(rosmap_clin_path)
rosmap_clin = rosmap_clin[ na.exclude(match(cyc_pred$ID, rosmap_clin$projid)),]
rosmap_clin = rosmap_clin %>%
mutate(braaksc_bin = cut(braaksc, c(0, 3, 5, 7), right = F))
rosmap_clin = rosmap_clin %>%
mutate(ceradsc_bin = cut(ceradsc, c(1, 3, 5), right = F))
rosmap_clin$apoe_ordinal  = 1
rosmap_clin$apoe_ordinal[rosmap_clin$apoe_genotype == 34 | rosmap_clin$apoe_genotype == 24] = 2
rosmap_clin$apoe_ordinal[rosmap_clin$apoe_genotype == 44 ] = 3
rosmap_clin$apoe_ordinal[is.na(rosmap_clin$apoe_genotype) ] = NA
###############
cyc_pred_merged = merge(cyc_pred, rosmap_clin, by.x = "ID", by.y = "projid", y.keep = F)
preds = cyc_pred_merged %>% dplyr::filter(Covariate_D == "cond_1") %>% dplyr::select(ID, Phase, cogdx, ceradsc_bin) %>% arrange(Phase)
gene = tmm[which(tmm$gene_names %in% seedlist), -1] # "gene" is tmm with only seedlist subset
gene1 = t(gene[,na.exclude(match(preds$ID, colnames(gene)))])  #the transpose, subjects x genes for tidyverse purposes
colnames(gene1) =  unname(unlist(tmm[which(tmm$gene_names %in% seedlist), 1]))  #add the gene names to the columns of gene1
cog = as.factor(preds$cogdx[match(rownames(gene1), preds$ID)])      # cogdx score 4 or 5
cerad = as.factor(preds$ceradsc_bin[match(rownames(gene1), preds$ID)])
times = as.numeric(preds$Phase[match(rownames(gene1), preds$ID)]) #in the case that I have CYCLOPS preds for subs not in tmm...
all_genes = foreach (gene_i = 1:ncol(gene1), .combine = rbind) %do%{
gexp1 = as.numeric(unlist(gene1[,gene_i]))
times1 = times
I_local_cog = cog
I_local_cerad = cerad
rm_NA = which(is.na(gexp1))
if (length(rm_NA) <= floor(.7*nrow(gene1))){ #only proceed if >70% of data are not NA
if(!is_empty(rm_NA)){
gexp1 = gexp1[-rm_NA]
times1 = times1[-rm_NA]
I_local_cog = cog[-rm_NA]
I_local_cerad = cerad[-rm_NA]
}
gexp1 = blunt_outliers(gexp1)
partial_model1 = lm(gexp1 ~ sin(times1) + cos(times1) + I_local_cog + 0)
full_model1 = lm(gexp1 ~ I_local_cog*sin(times1) + I_local_cog*cos(times1) + I_local_cog + 0)
anova_results1 = anova(partial_model1, full_model1)
p_cog = anova_results1$`Pr(>F)`[2]
Gene_Symbols = colnames(gene1)[gene_i]
sin_coeff = full_model1[["coefficients"]][["sin(times1)"]]
cos_coeff = full_model1[["coefficients"]][["cos(times1)"]]
sin_coeff2 = full_model1[["coefficients"]][["I_local_cog5:sin(times1)"]] + sin_coeff
cos_coeff2 = full_model1[["coefficients"]][["I_local_cog5:cos(times1)"]] + cos_coeff
acrophase_cog4 = atan2(sin_coeff, cos_coeff) %% (2*pi)
amplitude_cog4= sqrt((sin_coeff^2) + (cos_coeff^2))
acrophase_cog5 = atan2(sin_coeff2, cos_coeff2) %% (2*pi)
amplitude_cog5= sqrt((sin_coeff2^2) + (cos_coeff2^2))
####### ceradsc_binned #########
partial_model_cerad = lm(gexp1 ~ sin(times1) + cos(times1) + I_local_cerad + 0)
full_model_cerad = lm(gexp1 ~ I_local_cerad*sin(times1) + I_local_cerad*cos(times1) + I_local_cerad + 0)
anova_results_cerad = anova(partial_model_cerad, full_model_cerad)
p_cerad = anova_results_cerad$`Pr(>F)`[2]
sin_coeff_cerad = full_model_cerad[["coefficients"]][["sin(times1)"]]
cos_coeff_cerad = full_model_cerad[["coefficients"]][["cos(times1)"]]
sin_coeff2_cerad = full_model_cerad[["coefficients"]][["I_local_cerad[3,5):sin(times1)"]] + sin_coeff_cerad
cos_coeff2_cerad = full_model_cerad[["coefficients"]][["I_local_cerad[3,5):cos(times1)"]] + cos_coeff_cerad
acrophase_cerad1to2 = atan2(sin_coeff_cerad, cos_coeff_cerad) %% (2*pi)
amplitude_cerad1to2 = sqrt((sin_coeff_cerad^2) + (cos_coeff_cerad^2))
acrophase_cerad3to5 = atan2(sin_coeff2_cerad, cos_coeff2_cerad) %% (2*pi)
amplitude_cerad3to5= sqrt((sin_coeff2_cerad^2) + (cos_coeff2_cerad^2))
info = c( Gene_Symbols, p_cog, p_cerad, acrophase_cog4, acrophase_cog5,
acrophase_cerad1to2, acrophase_cerad3to5, amplitude_cog4,
amplitude_cog5, amplitude_cerad1to2, amplitude_cerad3to5)
return(info)
}
return(cbind( colnames(gene1)[gene_i], NA,NA, NA, NA, NA, NA, NA, NA, NA, NA))
}
all_genes = as_tibble(all_genes)
colnames(all_genes) = c("Gene_Symbols", "p_cogdx","p_ceradsc", "acrophase_cog4", "acrophase_cog5",
"acrophase_cerad1to2", "acrophase_cerad3to5", "amplitude_cog4",
"amplitude_cog5", "amplitude_cerad1to2", "amplitude_cerad3to5")
all_genes$BHQ_cogdx = p.adjust(as.numeric(all_genes$p_cogdx), "BH")
all_genes$Bonf_cogdx = p.adjust(as.numeric(all_genes$p_cogdx), "bonferroni")
all_genes$BHQ_cerad = p.adjust(as.numeric(all_genes$p_ceradsc), "BH")
all_genes$Bonf_cerad = p.adjust(as.numeric(all_genes$p_ceradsc), "bonferroni")
#all_genes$Log_AD_CTL_ampRatio = log(as.numeric(all_genes$amplitude_AD) / as.numeric(all_genes$amplitude_CTL))
return(all_genes)
}
####### differential rhtyhms with continuous cerad covs####
diff_rhythms_AD_cogdx25 = diff_rhyth_AD_severity(cyc_pred, tmm,
unlist(strong_cyclers_AD_AR25$Gene_Symbols, use.names = F),
rosmap_clin_path = "~/Box Sync/Henry_stuff/AD_project/scROSMAP/Meta_data/cleaned_rosmap_meta_cogdxConds.csv")
View(diff_rhythms_AD_cogdx25)
####### differential rhtyhms with continuous cerad covs####
diff_rhythms_AD_severity = diff_rhyth_AD_severity(cyc_pred, tmm,
unlist(strong_cyclers_AD_AR25$Gene_Symbols, use.names = F),
rosmap_clin_path = "~/Box Sync/Henry_stuff/AD_project/scROSMAP/Meta_data/cleaned_rosmap_meta_cogdxConds.csv")
diff_rhythms_AD_severity
strong_cogdx_diffs = filter(diff_rhythms_AD_severity, BHQ_cogdx< 0.1)
strong_cogdx_diffs
strong_cogdx_diffs = filter(diff_rhythms_AD_severity, BHQ_cogdx< 0.1) %>% select(Gene_Symbols)
h
#Continuous AD differences
write.table(diff_rhythms_AD_severity, paste(order_path, "diff_rhythms", "diff_rhythms_AD_severity_AR25.csv", sep = "/"), sep = ',', row.names = F, col.names = T)
strong_cogdx_diffs = filter(diff_rhythms_AD_severity, BHQ_cogdx< 0.1) %>% select(Gene_Symbols)
write.table(strong_cogdx_diffs, paste(order_path, "diff_rhythms", "strong_cogdx_diffs_AR25.csv", sep = "/"), sep = ',', row.names = F, col.names = T)
write.table(strong_cogdx_diffs, paste(order_path, "diff_rhythms", "enrichR_files", "strong_cogdx_diffs_AR25.csv", sep = "/"), sep = ',', row.names = F, col.names = T)
library(reticulate) #use to find conda env for python
library(tidyverse)
#get path to where this file resides
path = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path) #setwd to path of this file
source("./differential_rhyth_single_cov_for_AnalysisPipeline.R")
source("./create_rnk_files.R")
source("./fgsea.R")
source("./compareRhythms.R")
source("./Mesor_Venn_Diagram.R")
source("./Files_for_Pscan.R")
conda_list()
conda_list()[[2]][2] %>%
use_condaenv(required = TRUE)
# absolute path to translation dict between gene symbols and ENSEMBL
Ensembl_dict = readxl::read_xlsx("scROSMAP_ENSEMBL_dict.xlsx")
#Excitatory Neurons
path_to_cyclops_ordering = "~/Box Sync/Henry_stuff/AD_project/human_data/Cyclops_folders/training_output/scROSMAP/cogdx_controls/wAD/ExcitatoryNeurons/Exc_Neurons_CellFiltered10Percent_ErikChenZhang_condCovs_3EG_Jun12Redo/"
path_to_tmm_file = "~/Box Sync/Henry_stuff/AD_project/human_data/Cyclops_folders/tmms/scROSMAP/cogdx_controls/ExcNeurons_cellsFiltered1count10percentCells.csv"
setwd(paste0(path_to_cyclops_ordering, "diff_rhythms"))
path_no_space = gsub(" ", "\\ ", path, fixed = TRUE)
gene_lists = list.files("./enrichR_files/", pattern = "^(CTL_|AD_|DR_)")
gene_lists
setwd("enrichR_files/")
DR_gene_lists = list.files( pattern = "^(DR_)")
DR_gene_lists
setwd("enrichR_files/")
#Diff_rhythms
setwd(paste0(path_to_cyclops_ordering, "diff_rhythms"))
path_no_space
paste0("python3 ", path_no_space, "/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/strong_cogdx_diffs_AR25.csv \" -b \"",y , "\"")
paste0("python3 ", path_no_space, "/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/strong_cogdx_diffs_AR25.csv \" -b \"AD_cyclers_AR25Bonf05.csv\"")
#AD severity
system(paste0("python3 ", path_no_space, "/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/strong_cogdx_diffs_AR25.csv \" -b \"AD_cyclers_AR25Bonf05.csv\""))
#AD severity
system(paste0("python3 ", path_no_space, "/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/strong_cogdx_diffs_AR25.csv \" -b \"enrichR_files/AD_cyclers_AR25Bonf05.csv\""))
Ensembl = Ensembl_dict$ENSEMBL[match(strong_cogdx_diffs$Gene_Symbols, Ensembl_dict$Gene_Symbol)]
strong_cogdx_diffs = cbind(Ensembl, strong_cogdx_diffs) %>% select(Ensembl , Gene_Symbols )
strong_cogdx_diffs
write.table(strong_cogdx_diffs, paste(order_path, "diff_rhythms", "enrichR_files", "strong_cogdx_diffs_AR25.csv", sep = "/"), sep = ',', row.names = F, col.names = T)
strong_cogdx_diffs
rownames(strong_cogdx_diffs)
write.table(strong_cogdx_diffs, paste(order_path, "diff_rhythms", "enrichR_files", "strong_cogdx_diffs_AR25.csv", sep = "/"), sep = ',', row.names = F, col.names = T)
#AD severity
system(paste0("python3 ", path_no_space, "/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/strong_cogdx_diffs_AR25.csv \" -b \"enrichR_files/AD_cyclers_AR25Bonf05.csv\""))
paste0("python3 ", path_no_space, "/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/strong_cogdx_diffs_AR25.csv \" -b \"enrichR_files/AD_cyclers_AR25Bonf05.csv\"")
paste0("python3 ", path_no_space, "/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/strong_cogdx_diffs_AR25.csv \" -b \"enrichR_files/AD_cyclers_AR25Bonf05.csv\"")
#AD severity
system(paste0("python3 ", path_no_space, "/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/strong_cogdx_diffs_AR25.csv\" -b \"enrichR_files/AD_cyclers_AR25Bonf05.csv\""))
BiocManager::install("mygene")
library(mygene)
?mygene
browseVignettes("mygene")
getGene("ARNTL")
> getGenes(c("ENSG00000148795"))
> getGenes(("ENSG00000148795"))
getGenes(("ENSG00000148795"))
getGenes(("ENSG00000148795"), fields = a;;)
getGenes(("ENSG00000148795"), fields = "All")
getGenes(("ENSG00000148795"), fields = "all")
setwd("~/Box Sync/Henry_stuff/AD_project/scROSMAP/counts/")
list.files()
read_csv("Excitatory_Neurons_counts.csv")
setwd("~/Box Sync/Henry_stuff/AD_project/PseudoBulkVillas/Jan12/")
load("rosmap424_pseudobulk_by_cluster.rda")
counts
rownames(conts)
rownames(counts)
gene_symbols = rownames(counts)
gene_symbols
setwd("~/Box Sync/Henry_stuff/AD_project/scROSMAP/Rscripts/")
setwd("~/Box Sync/Henry_stuff/AD_project/scROSMAP/Rscripts/automatic_downstream_analysis/")
df = read_excel("scROSMAP_ENSEMBL_dict.xlsx")
df
View(df)
is.na(df)
which(is.na(df))
getGenes(df$ENSEMBL)
test = getGenes(df$ENSEMBL[1], fields = "all")
View(test)
test = getGenes(df$ENSEMBL[1])
df$ENSEMBL[1]
test = getGenes(c(df$ENSEMBL[1]), fields = "all")
test = getGenes(df$ENSEMBL[1:2], fields = "all")
test = getGenes('ENSG00000133794', fields = "all")
test@listData[["ensembl.protein"]][[1]]
test = getGenes('ENSG00000133794', fields = "alias")
test = getGenes('ENSG00000133794', fields = "alias")
test@listData[["alias"]][[1]]
df_w_alias = getGenes(df$ENSEMBL, fields = "alias")
View(df_w_alias)
df_w_alias@listData[["alias"]]
as.data.frame(df_w_alias@listData[["alias"]])
df_w_alias@listData[["alias"]][[2]]
class(df_w_alias@listData[["alias"]][[2]])
r <- list(structure(c(21, 1), .Names = c("AA", "AB")), structure(c(19,
4), .Names = c("AA", "AB")), structure(c(23, 1), .Names = c("AA",
"AB")), structure(c(15, 3, 6), .Names = c("AA", "AB", "BB")))
r
r[[4]]
class(r[[4]])
r1 <- lapply(r, as.data.frame.list)
r1
class(r``)
class(r1)
library(data.table)
rbindlist(r, fill=TRUE)
library(data.table)
rbindlist(r1, fill=TRUE)
r1 <- lapply(df_w_alias, as.data.frame.list)
tmp = df_w_alias@listData[["alias"]]
r1 <- lapply(tmp, as.data.frame.list)
r1
rbindlist(r1, fill = T)
tmp = df_w_alias@listData[["alias"]]
tmp <- lapply(tmp, as.data.frame.list)
tmp
tmp2 = tmp
df_w_alias = rbindlist(tmp2)
df_w_alias = rbindlist(tmp2, fill = T)
View(df_w_alias)
tmp2
df_w_alias = getGenes(df$ENSEMBL, fields = "alias")
res <- as.data.frame(t(stri_list2matrix(df_w_alias@listData[["alias"]])))
library(stringi)
res <- as.data.frame(t(stri_list2matrix(df_w_alias@listData[["alias"]])))
res
View(res)
unique(unlist(sapply(df_w_alias@listData[["alias"]], names)))
df_w_alias = getGenes(df$ENSEMBL, fields = "alias")
library(stringi)
res <- as.data.frame(t(stri_list2matrix(df_w_alias@listData[["alias"]])))
View(df)
cbind(df, res)
out = cbind(df, res)
View(out)
xlsx::write.xlsx(out, "scROSMAP_genes_w_alias.xlsx", col.names =T, row.names = F, showNA = F)
install.packages("xlsx")
xlsx::write.xlsx(out, "scROSMAP_genes_w_alias.xlsx", col.names =T, row.names = F, showNA = F)
openxlsx
install.packages("openxlsx")
openxlsx::write.xlsx(out, "scROSMAP_genes_w_alias.xlsx", colNames =T, rowNames() = F, keepNA = F)
openxlsx::write.xlsx(out, "scROSMAP_genes_w_alias.xlsx", colNames =T, rowNames= F, keepNA = F)
library(Seurat)
library(edgeR)
library(NMOF)
library(parallel)
library(tidyverse)
library(deltaccd)
library(gridExtra)
library(grid)
load("../rosmap424_pseudobulk_by_cluster.rda")
#clean up column (subcluster names)
colnames(counts) = str_replace(colnames(counts), "_donor", "")
colnames(counts) = str_replace(colnames(counts), ".rds", "")
rownames(pseudobulk_meta) = colnames(counts)
#read in subject metadata
rosmap_subject_metadata = read.csv("../ROSMAP_metadata/cleaned_rosmap_meta_cogdxConds.csv")
#read in another file with sequencing info for all scRNAseq done for ROSMAP
rosmap_scassay_meta = read_csv("../ROSMAP_metadata/ROSMAP_assay_scrnaSeq_metadata.csv", show_col_types = F)
#Seurat now complains when groub.by argument in AggregrateCounts is numeric so I'll change them in rosmap_metadata and pseudobulk_meta:
pseudobulk_meta$project_id = paste0("X", pseudobulk_meta$project_id)
rosmap_subject_metadata$projid = paste0("X", rosmap_subject_metadata$projid)
#remove the cogdx 6 subjects from the metadata file
rosmap_meta = filter(rosmap_subject_metadata, cogdx != 6)
#merge large meta_data file with sequencing info
rosmap_scassay_meta = rosmap_scassay_meta %>% separate_wider_delim(cols = 2, delim = "_", names = c("col1", "individualID"), too_many = "drop", too_few = "align_start")
# full_meta = merge(rosmap_meta, rosmap_scassay_meta, by = "individualID", all.x = T)
rosmap_meta$batch = rosmap_scassay_meta$rnaBatch[match(rosmap_meta$individualID, rosmap_scassay_meta$individualID)]
rosmap_meta$batch = str_extract(rosmap_meta$batch, "(?<=-B)[0-9]*") %>% as.numeric
rosmap_meta = rosmap_meta %>%
mutate(batch_bin = cut(batch, c(4, 10, 64), right = F))
##### AUGMENT ROSMAP_META #####
rosmap_meta = rosmap_meta %>%
mutate(braaksc_bin = cut(braaksc, c(0, 3, 5, 7), right = F))
rosmap_meta = rosmap_meta %>%
mutate(ceradsc_bin = cut(ceradsc, c(1, 3, 5), right = F))
rosmap_meta$apoe_ordinal  = 1
rosmap_meta$apoe_ordinal[rosmap_meta$apoe_genotype == 34 | rosmap_meta$apoe_genotype == 24] = 2
rosmap_meta$apoe_ordinal[rosmap_meta$apoe_genotype == 44 ] = 3
rosmap_meta$apoe_ordinal[is.na(rosmap_meta$apoe_genotype) ] = NA
rosmap_meta$age_death_numeric = rosmap_meta$age_death %>% str_replace("\\+", "") %>% as.numeric
#adds cogdx score for each subcluster
pseudobulk_meta$cogdx = rosmap_meta$cogdx[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
pseudobulk_meta$cond_cogdx = rosmap_meta$cond_cogdx[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
pseudobulk_meta$pmi = rosmap_meta$pmi[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
pseudobulk_meta$sex = rosmap_meta$msex[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
sex_table = table(rosmap_meta$cond_cogdx, rosmap_meta$msex)
colnames(sex_table) = c("female", "male")
rownames(sex_table)= c("cond_0", "cond_1")
#creates a seurat object
seurat_obj = CreateSeuratObject(
counts,
project = "scRNA ROSMAP",
assay = "RNA",
names.field = 3,
names.delim = "_",
meta.data = pseudobulk_meta)
#get Ribo Protein percent
seurat_obj <- PercentageFeatureSet(seurat_obj, "^RP[SL]", col.name = "percent_ribo")
# Percentage hemoglobin genes - includes all genes starting with HB except HBP.
seurat_obj <- PercentageFeatureSet(seurat_obj, "^HB[^(P)]", col.name = "percent_hb")
#Does number of ribosoal features (%ribo * n_features) change with cogdx
RPSL.genes <- grep(pattern = "^RP[SL]", x = rownames(x = seurat_obj@assays$RNA$counts), value = TRUE)
counts.RPS <- Matrix::colSums(seurat_obj@assays$RNA$counts[RPSL.genes, ])
seurat_obj = AddMetaData(
object = seurat_obj,
metadata = counts.RPS,
col.name = "cnts_ribo"
)
# VlnPlot(seurat_obj, group.by = "cond_cogdx", features = c("cnts_ribo", "pmi"), pt.size = 0.1, ncol = 1, alpha = 0)
#plot QC mertrics
# feats <- c("nFeature_RNA", "nCount_RNA", "percent_ribo")
# VlnPlot(seurat_obj, group.by = "broadclass", features = feats, pt.size = 0.1, ncol = 2, alpha = 0.05) +
# NoLegend()
#creates a reference correlation matrix
refCor = getRefCor(species = "human", tissue = "pan", useEntrezGeneId = F)
loss = function(str){
expr = FetchData(seurat_obj, vars = "cluster")
tmp = seurat_obj[,grep(str, expr$cluster)]
cts <- AggregateExpression(tmp,
group.by = c("project_id"),
assays = 'RNA',
slot = "counts",
return.seurat = FALSE)
cts = cts$RNA[,na.exclude(match(rosmap_meta$projid, colnames(cts$RNA)))]
my_rosmap_meta = rosmap_meta[match(colnames(cts), rosmap_meta$projid), ]
#create DGElist
y <- DGEList(counts = cts, group = my_rosmap_meta$cond_cogdx)
#default params for filterByExpression
keep.genes = filterByExpr(y)
if (all(keep.genes[rownames(refCor)])){
#filter out the genes
y = y[keep.genes, , keep=FALSE]
# print(paste("keeping", dim(y)[1], "genes"))
my_tmm_DGE_obj <- calcNormFactors(y, method = "TMM")
my_tmm = cpm(my_tmm_DGE_obj) #calculate tmms: https://www.biostars.org/p/317701/
my_tmm = as.data.frame(my_tmm)
# all(colnames(my_tmm) == (rosmap_meta$projid))
try({
ans = calcCCD(refCor, emat = as.data.frame(my_tmm[rownames(refCor),]), groupVec = my_rosmap_meta$cond_cogdx)
return(ans$CCD[1])},
silent = T
)
return(Inf)
}
return(Inf)
}
n = 16 #number of subclusters to consider
l <- rep(list(0:1), n)
df=expand.grid(l)
colnames(df) = paste0("Exc\\.", 1:n,"$") #replace `Ast` for other subclusters, ie. Exc, Inh, Mic, etc.
strs = c()
for (i in 2:nrow(df)){
out = paste(colnames(df)[which(df[i,] == 1)], collapse = "|")
strs = c(strs, out)
}
2^16-1
tic = Sys.time()
grid_results = gridSearch(loss, levels = list(str = strs), method = 'multicore', mc.control = list(mc.cores = 10))
load("/Users/henryhollis/Box Sync/Henry_stuff/AD_project/scROSMAP/BestSubclusters_server.rda")
View(grid_results)
sort(values)
sort(grid_results$values)
order(grid_results$values)
idx = order(grid_results$values)
grid_results$minlevels[idx]
grid_results$levels[idx]
sorted_levels = grid_results$levels[idx]
View(sorted_levels)
hist(grid_results$values)
grep("Exc\\.3", sorted_levels)
grep("Exc\\.3$", sorted_levels)
grep("Exc\\.3", sorted_levels[["values"]])
sort_values[[3]]
sorted_values[[3]]
sorted_leveles[["values"]]
sorted_levels[["values"]]
sorted_levels[,2]
sorted_levels
sorted_levels %>% list()
sorted_levels %>% unlist
sorted_levels= sorted_levels %>% unlist
grep("Exc\\.3", sorted_levels)
sorted_levels
class(sorted_levels)
grep("Exc\\.3$", sorted_levels)
grep("Exc", sorted_levels)
grep("Exc\\\\.3", sorted_levels)
View(grid_results)
sorted_levels
grep("Exc\\\\.3", sorted_levels)[1:100]
sort(grid_results$values)
grep("Exc\\\\.3", sorted_levels)[1:500]
grep("Exc\\\\.3|Exc\\\\.5", sorted_levels)[1:500]
grep("Exc\\\\.3|Exc\\\\.5", sorted_levels)[1:500] %>% length()
grep("Exc\\\\.3|Exc\\\\.5", sorted_levels[1:500])
str_extract_all(sorted_levels[1:500], "\d+")
str_extract_all(sorted_levels[1:500], "\\d+")
numbers = str_extract_all(sorted_levels[1:500], "\\d+")
View(numbers)
sorted_levels
numbers = str_extract_all(sorted_levels[1:500], "\\d+") %>% rbind
View(numbers)
numbers = str_extract_all(sorted_levels[1:500], "\\d+")
numbers = str_extract_all(sorted_levels[1:500], "\\d+")
View(numbers)
test = list_rbind(numbers)
list_flatten(numbers)
numbers = str_extract_all(sorted_levels[1:500], "\\d+") %>% unlist(use.names = F)
table(numbers)
