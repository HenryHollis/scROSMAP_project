my_tmm_combat = as.data.frame(my_tmm_combat)
all(colnames(my_tmm_combat) == (my_rosmap_meta$projid))
CYCLOPS_seed_genes = CYCLOPS_seed_genes[which(CYCLOPS_seed_genes %in% rownames(my_tmm_combat))]
pc_res = prcomp(t(my_tmm_combat), scale. = T)
pc_res_seeds = prcomp(t(my_tmm_combat[CYCLOPS_seed_genes,]), scale. = T)
plot_pcs(pc_res, my_rosmap_meta$batch_bin, "PCA All Genes, Seq. Batch")
plot_pcs(pc_res_seeds, my_rosmap_meta$batch_bin, "PCA CYCLOPS Seed Genes, Seq. Batch")
plot_pcs(pc_res, my_rosmap_meta$msex, "PCA All Genes, Sex")
plot_pcs(pc_res_seeds, my_rosmap_meta$msex, "PCA CYCLOPS Seed Genes, Sex")
plot_pcs(pc_res, my_rosmap_meta$pmi, "PCA All Genes, PMI", continuous = T)
plot_pcs(pc_res_seeds, my_rosmap_meta$pmi, "PCA CYCLOPS Seed Genes, PMI", continuous = T)
setwd("../normed_counts/")
out = rownames_to_column(my_tmm_combat, var = "Gene_Symbols")
covs = c("Cond_D", paste0("cond_", my_rosmap_meta$cond))
covs1 = c("Batch_D", paste0("cond_", my_rosmap_meta$batch_bin))
covs1 = str_replace(covs1, "\\[10,64\\)", "0")
covs1 = str_replace(covs1, "\\[4,10\\)", "1")
covs2 = c("ceradsc_D", paste0("cond_",  my_rosmap_meta$ceradsc_bin))
covs3 = c("braaksc_D", paste0("cond_",  my_rosmap_meta$braaksc_bin))
covs4 = c("sex_D", paste0("cond_", my_rosmap_meta$msex))
#fill one missing pmi value to median of pmi's:
my_rosmap_meta$pmi[which(is.na(my_rosmap_meta$pmi))] = median(my_rosmap_meta$pmi, na.rm = T)
covs5 = c("pmi_C", my_rosmap_meta$pmi)
out = rbind(covs, covs1, covs2, covs3, covs4, covs5, out)
colnames(out) = str_replace(colnames(out), "X", "")
write.table(out, "All_Inh_FiltByExprDefault_TMM_CombatAdjusted.csv", sep = ',', row.names = F)
library(Seurat)
library(edgeR)
library(NMOF)
library(parallel)
library(tidyverse)
library(deltaccd)
library(gridExtra)
library(grid)
load("../rosmap424_pseudobulk_by_cluster.rda")
#clean up column (subcluster names)
colnames(counts) = str_replace(colnames(counts), "_donor", "")
colnames(counts) = str_replace(colnames(counts), ".rds", "")
rownames(pseudobulk_meta) = colnames(counts)
#read in subject metadata
rosmap_subject_metadata = read.csv("../ROSMAP_metadata/cleaned_rosmap_meta_cogdxConds.csv")
#read in another file with sequencing info for all scRNAseq done for ROSMAP
rosmap_scassay_meta = read_csv("../ROSMAP_metadata/ROSMAP_assay_scrnaSeq_metadata.csv", show_col_types = F)
#Seurat now complains when groub.by argument in AggregrateCounts is numeric so I'll change them in rosmap_metadata and pseudobulk_meta:
pseudobulk_meta$project_id = paste0("X", pseudobulk_meta$project_id)
rosmap_subject_metadata$projid = paste0("X", rosmap_subject_metadata$projid)
#remove the cogdx 6 subjects from the metadata file
rosmap_meta = filter(rosmap_subject_metadata, cogdx != 6)
#merge large meta_data file with sequencing info
rosmap_scassay_meta = rosmap_scassay_meta %>% separate_wider_delim(cols = 2, delim = "_", names = c("col1", "individualID"), too_many = "drop", too_few = "align_start")
# full_meta = merge(rosmap_meta, rosmap_scassay_meta, by = "individualID", all.x = T)
rosmap_meta$batch = rosmap_scassay_meta$rnaBatch[match(rosmap_meta$individualID, rosmap_scassay_meta$individualID)]
rosmap_meta$batch = str_extract(rosmap_meta$batch, "(?<=-B)[0-9]*") %>% as.numeric
rosmap_meta = rosmap_meta %>%
mutate(batch_bin = cut(batch, c(4, 10, 64), right = F))
##### AUGMENT ROSMAP_META #####
rosmap_meta = rosmap_meta %>%
mutate(braaksc_bin = cut(braaksc, c(0, 3, 5, 7), right = F))
rosmap_meta = rosmap_meta %>%
mutate(ceradsc_bin = cut(ceradsc, c(1, 3, 5), right = F))
rosmap_meta$apoe_ordinal  = 1
rosmap_meta$apoe_ordinal[rosmap_meta$apoe_genotype == 34 | rosmap_meta$apoe_genotype == 24] = 2
rosmap_meta$apoe_ordinal[rosmap_meta$apoe_genotype == 44 ] = 3
rosmap_meta$apoe_ordinal[is.na(rosmap_meta$apoe_genotype) ] = NA
rosmap_meta$age_death_numeric = rosmap_meta$age_death %>% str_replace("\\+", "") %>% as.numeric
#adds cogdx score for each subcluster
pseudobulk_meta$cogdx = rosmap_meta$cogdx[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
pseudobulk_meta$cond_cogdx = rosmap_meta$cond_cogdx[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
pseudobulk_meta$pmi = rosmap_meta$pmi[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
pseudobulk_meta$sex = rosmap_meta$msex[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
sex_table = table(rosmap_meta$cond_cogdx, rosmap_meta$msex)
colnames(sex_table) = c("female", "male")
rownames(sex_table)= c("cond_0", "cond_1")
#creates a seurat object
seurat_obj = CreateSeuratObject(
counts,
project = "scRNA ROSMAP",
assay = "RNA",
names.field = 3,
names.delim = "_",
meta.data = pseudobulk_meta)
#get Ribo Protein percent
seurat_obj <- PercentageFeatureSet(seurat_obj, "^RP[SL]", col.name = "percent_ribo")
# Percentage hemoglobin genes - includes all genes starting with HB except HBP.
seurat_obj <- PercentageFeatureSet(seurat_obj, "^HB[^(P)]", col.name = "percent_hb")
#Does number of ribosoal features (%ribo * n_features) change with cogdx
RPSL.genes <- grep(pattern = "^RP[SL]", x = rownames(x = seurat_obj@assays$RNA$counts), value = TRUE)
counts.RPS <- Matrix::colSums(seurat_obj@assays$RNA$counts[RPSL.genes, ])
seurat_obj = AddMetaData(
object = seurat_obj,
metadata = counts.RPS,
col.name = "cnts_ribo"
)
# VlnPlot(seurat_obj, group.by = "cond_cogdx", features = c("cnts_ribo", "pmi"), pt.size = 0.1, ncol = 1, alpha = 0)
#plot QC mertrics
# feats <- c("nFeature_RNA", "nCount_RNA", "percent_ribo")
# VlnPlot(seurat_obj, group.by = "broadclass", features = feats, pt.size = 0.1, ncol = 2, alpha = 0.05) +
# NoLegend()
#creates a reference correlation matrix
refCor = getRefCor(species = "human", tissue = "pan", useEntrezGeneId = F)
get_subcluster_data = function(str){
expr = FetchData(seurat_obj, vars = "cluster")
tmp = seurat_obj[,grep(str, expr$cluster)]
cts <- AggregateExpression(tmp,
group.by = c("project_id"),
assays = 'RNA',
slot = "counts",
return.seurat = FALSE)
cts = cts$RNA[,na.exclude(match(rosmap_meta$projid, colnames(cts$RNA)))]
}
cts = get_subcluster_data("Mic.*")
#"Inh\\.2$|Inh\\.8$|Inh\\.11$|Inh\\.12$|Inh\\.13$"
#"Exc\\.5$|Exc\\.3$"
# "Ast\\.1$|Ast\\.2$|Ast\\.5$|Ast\\.6$|Ast\\.7$|Ast\\.8$"
# "Mic\\.4$|Mic\\.5$|Mic\\.6$|Mic\\.7$|Mic\\.8$|Mic\\.10$|Mic\\.11$|Mic\\.13$|Mic\\.15$|Mic\\.16$"
my_rosmap_meta = rosmap_meta[match(colnames(cts), rosmap_meta$projid), ]
#create DGElist
y <- DGEList(counts = cts, group = my_rosmap_meta$cond_cogdx)
#default params for filterByExpression
keep.genes = filterByExpr(y)
keep.genes[rownames(refCor)] = T #make sure genes needed for cormat are kept
#filter out the genes
y = y[keep.genes, , keep=FALSE]
my_tmm_DGE_obj <- calcNormFactors(y, method = "TMM")
my_tmm = cpm(my_tmm_DGE_obj) #calculate tmms: https://www.biostars.org/p/317701/
my_tmm = as.data.frame(my_tmm)
plotHeatmap(rownames(refCor), emat = as.data.frame(my_tmm), groupVec = my_rosmap_meta$cond_cogdx)
# rm_vars1 = rowSums(my_tmm[,my_rosmap_meta$cond_cogdx])
# rm_vars2 = rowSums(my_tmm[,!my_rosmap_meta$cond_cogdx])
# rm_rows = which(rm_vars1 == 0 | rm_vars2 == 0)
# keep_refCor = which(rownames(refCor) %in% rownames(my_tmm[-rm_rows,]))
# calcCCD(refCor[keep_refCor, keep_refCor], emat = as.data.frame(my_tmm[-rm_rows,]), groupVec = my_rosmap_meta$cond_cogdx)
# calcDeltaCCD(refCor[keep_refCor, keep_refCor], as.data.frame(my_tmm[-rm_rows,]), groupVec = my_rosmap_meta$cond_cogdx, groupNormal = 0)
calcCCD(refCor, emat = as.data.frame(my_tmm), groupVec = my_rosmap_meta$cond_cogdx)
calcDeltaCCD(refCor, as.data.frame(my_tmm), groupVec = my_rosmap_meta$cond_cogdx, groupNormal = 0)
CYCLOPS_seed_genes = c("DBP", "TEF", "ZNF580", "GFOD1", "CASTOR2", "ETV5", "FMNL1", "MAMLD1", "TM7SF2", "FPGS", "SYNJ2", "HLF", "KBTBD2", "MPP2", "MRGBP", "USP2", "CC2D1B", "GALNT9", "GSTT2B", "NR1D1", "SRSF5", "ZMAT3", "ARNTL", "FAM3A", "FOSL2", "HUNK", "MORN1", "NEXN", "SPHK2", "TRIM9", "ENC1", "GUF1", "IGFBP4", "PER2", "CRY1", "MRAS", "SFPQ", "ARRDC1", "CFAP46", "DNAJB1", "MKKS", "SARS2", "SEC14L1", "SETD4", "SLC6A6", "SPATA7", "TFR2", "PER1", "POR", "SLC16A1", "PER3", "NPAS2", "TSC22D3", "BHLHE41", "NR1D2", "LEO1", "STK35", "GRAMD4", "COQ10B", "DTX4", "PDZRN3", "DUSP11", "OPRL1", "LRRC39", "TRIM24", "RARA", "LDB1", "BHLHE40", "RSPO2", "TRAF5", "ANKRD12")
CYCLOPS_seed_genes = CYCLOPS_seed_genes[which(CYCLOPS_seed_genes %in% rownames(my_tmm))]
pc_res = prcomp(t(my_tmm), scale. = T)
pc_res_seeds = prcomp(t(my_tmm[CYCLOPS_seed_genes,]), scale. = T)
pc_res_rp = prcomp(t(my_tmm[grep("^RP[SL]", rownames(my_tmm)),]), scale. = T)
plot_pcs = function(pc_res, colorvec, title, continuous = F){
if(!continuous){colorvec = as.factor(colorvec)}
p1 = ggplot(as.data.frame(pc_res$x), aes(x = PC1, y = PC2, color = colorvec))+geom_point() + {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p2 = ggplot(as.data.frame(pc_res$x), aes(x = PC2, y = PC3, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p3 = ggplot(as.data.frame(pc_res$x), aes(x = PC1, y = PC3, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p4 = ggplot(as.data.frame(pc_res$x), aes(x = PC1, y = PC4, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p5 = ggplot(as.data.frame(pc_res$x), aes(x = PC2, y = PC4, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p6 = ggplot(as.data.frame(pc_res$x), aes(x = PC3, y = PC4, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
grid.arrange(p1, p2, p3,p4,p5, p6, nrow = 3, top=textGrob(title,gp=gpar(fontsize=12,font=3)))
}
plot_pcs(pc_res, my_rosmap_meta$batch_bin, "PCA All Genes, Seq. Batch")
plot_pcs(pc_res_rp, my_rosmap_meta$batch_bin, "PCA Ribo Genes, Seq. Batch")
plot_pcs(pc_res_seeds, my_rosmap_meta$batch_bin, "PCA CYCLOPS Seed Genes, Seq. Batch")
plot_pcs(pc_res, my_rosmap_meta$msex, "PCA All Genes, Sex")
plot_pcs(pc_res_seeds, my_rosmap_meta$msex, "PCA CYCLOPS Seed Genes, Sex")
plot_pcs(pc_res_rp, my_rosmap_meta$msex, "PCA Ribo Genes, Sex")
plot_pcs(pc_res, my_rosmap_meta$pmi, "PCA All Genes, PMI", continuous = T)
plot_pcs(pc_res_seeds, my_rosmap_meta$pmi, "PCA CYCLOPS Seed Genes, PMI", continuous = T)
plot_pcs(pc_res_rp, my_rosmap_meta$pmi, "PCA Ribo Genes, PMI", T)
plot_pcs(pc_res, my_rosmap_meta$Study, "PCA All Genes, Study")
plot_pcs(pc_res_seeds, my_rosmap_meta$Study, "PCA CYCLOPS Seed Genes, Study")
plot_pcs(pc_res_rp, my_rosmap_meta$Study, "PCA Ribo Genes, Study")
library(sva)
#double check metadata is in order
all(my_rosmap_meta$projid== colnames(cts))
adjusted_counts <- ComBat_seq(as.matrix(cts), batch=my_rosmap_meta$batch_bin, group=my_rosmap_meta$cond_cogdx, covar_mod=NULL, full_mod=TRUE,shrink=FALSE, shrink.disp=FALSE, gene.subset.n=NULL)
View(my_tmm)
all(colnames(cts) == (my_rosmap_meta$projid))
#create DGElist
y_combat <- DGEList(counts = adjusted_counts, group = my_rosmap_meta$cond_cogdx)
#default params for filterByExpression
keep.genes = filterByExpr(y_combat)
#filter out the genes
y_combat = y_combat[keep.genes, , keep=FALSE]
print(paste("keeping", dim(y_combat)[1], "genes"))
my_tmm_DGE_obj <- calcNormFactors(y_combat, method = "TMM")
my_tmm_combat = cpm(my_tmm_DGE_obj) #calculate tmms: https://www.biostars.org/p/317701/
my_tmm_combat = as.data.frame(my_tmm_combat)
all(colnames(my_tmm_combat) == (my_rosmap_meta$projid))
setwd("../normed_counts/")
out = rownames_to_column(my_tmm_combat, var = "Gene_Symbols")
covs = c("Cond_D", paste0("cond_", my_rosmap_meta$cond))
covs1 = c("Batch_D", paste0("cond_", my_rosmap_meta$batch_bin))
covs1 = str_replace(covs1, "\\[10,64\\)", "0")
covs1 = str_replace(covs1, "\\[4,10\\)", "1")
covs2 = c("ceradsc_D", paste0("cond_",  my_rosmap_meta$ceradsc_bin))
covs3 = c("braaksc_D", paste0("cond_",  my_rosmap_meta$braaksc_bin))
covs4 = c("sex_D", paste0("cond_", my_rosmap_meta$msex))
#fill one missing pmi value to median of pmi's:
my_rosmap_meta$pmi[which(is.na(my_rosmap_meta$pmi))] = median(my_rosmap_meta$pmi, na.rm = T)
covs5 = c("pmi_C", my_rosmap_meta$pmi)
out = rbind(covs, covs1, covs2, covs3, covs4, covs5, out)
colnames(out) = str_replace(colnames(out), "X", "")
write.table(out, "ALL_Mic_FiltByExprDefault_TMM_CombatAdjusted.csv", sep = ',', row.names = F)
CYCLOPS_seed_genes = CYCLOPS_seed_genes[which(CYCLOPS_seed_genes %in% rownames(my_tmm_combat))]
pc_res = prcomp(t(my_tmm_combat), scale. = T)
pc_res_seeds = prcomp(t(my_tmm_combat[CYCLOPS_seed_genes,]), scale. = T)
plot_pcs(pc_res, my_rosmap_meta$batch_bin, "PCA All Genes, Seq. Batch")
plot_pcs(pc_res_seeds, my_rosmap_meta$batch_bin, "PCA CYCLOPS Seed Genes, Seq. Batch")
plot_pcs(pc_res, my_rosmap_meta$msex, "PCA All Genes, Sex")
plot_pcs(pc_res_seeds, my_rosmap_meta$msex, "PCA CYCLOPS Seed Genes, Sex")
plot_pcs(pc_res, my_rosmap_meta$pmi, "PCA All Genes, PMI", continuous = T)
plot_pcs(pc_res_seeds, my_rosmap_meta$pmi, "PCA CYCLOPS Seed Genes, PMI", continuous = T)
library(Seurat)
library(edgeR)
library(NMOF)
library(parallel)
library(tidyverse)
library(deltaccd)
library(gridExtra)
library(grid)
load("../rosmap424_pseudobulk_by_cluster.rda")
#clean up column (subcluster names)
colnames(counts) = str_replace(colnames(counts), "_donor", "")
colnames(counts) = str_replace(colnames(counts), ".rds", "")
rownames(pseudobulk_meta) = colnames(counts)
#read in subject metadata
rosmap_subject_metadata = read.csv("../ROSMAP_metadata/cleaned_rosmap_meta_cogdxConds.csv")
#read in another file with sequencing info for all scRNAseq done for ROSMAP
rosmap_scassay_meta = read_csv("../ROSMAP_metadata/ROSMAP_assay_scrnaSeq_metadata.csv", show_col_types = F)
#Seurat now complains when groub.by argument in AggregrateCounts is numeric so I'll change them in rosmap_metadata and pseudobulk_meta:
pseudobulk_meta$project_id = paste0("X", pseudobulk_meta$project_id)
rosmap_subject_metadata$projid = paste0("X", rosmap_subject_metadata$projid)
#remove the cogdx 6 subjects from the metadata file
rosmap_meta = filter(rosmap_subject_metadata, cogdx != 6)
#merge large meta_data file with sequencing info
rosmap_scassay_meta = rosmap_scassay_meta %>% separate_wider_delim(cols = 2, delim = "_", names = c("col1", "individualID"), too_many = "drop", too_few = "align_start")
# full_meta = merge(rosmap_meta, rosmap_scassay_meta, by = "individualID", all.x = T)
rosmap_meta$batch = rosmap_scassay_meta$rnaBatch[match(rosmap_meta$individualID, rosmap_scassay_meta$individualID)]
rosmap_meta$batch = str_extract(rosmap_meta$batch, "(?<=-B)[0-9]*") %>% as.numeric
rosmap_meta = rosmap_meta %>%
mutate(batch_bin = cut(batch, c(4, 10, 64), right = F))
##### AUGMENT ROSMAP_META #####
rosmap_meta = rosmap_meta %>%
mutate(braaksc_bin = cut(braaksc, c(0, 3, 5, 7), right = F))
rosmap_meta = rosmap_meta %>%
mutate(ceradsc_bin = cut(ceradsc, c(1, 3, 5), right = F))
rosmap_meta$apoe_ordinal  = 1
rosmap_meta$apoe_ordinal[rosmap_meta$apoe_genotype == 34 | rosmap_meta$apoe_genotype == 24] = 2
rosmap_meta$apoe_ordinal[rosmap_meta$apoe_genotype == 44 ] = 3
rosmap_meta$apoe_ordinal[is.na(rosmap_meta$apoe_genotype) ] = NA
rosmap_meta$age_death_numeric = rosmap_meta$age_death %>% str_replace("\\+", "") %>% as.numeric
#adds cogdx score for each subcluster
pseudobulk_meta$cogdx = rosmap_meta$cogdx[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
pseudobulk_meta$cond_cogdx = rosmap_meta$cond_cogdx[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
pseudobulk_meta$pmi = rosmap_meta$pmi[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
pseudobulk_meta$sex = rosmap_meta$msex[match(pseudobulk_meta$project_id, rosmap_meta$projid)]
sex_table = table(rosmap_meta$cond_cogdx, rosmap_meta$msex)
colnames(sex_table) = c("female", "male")
rownames(sex_table)= c("cond_0", "cond_1")
#creates a seurat object
seurat_obj = CreateSeuratObject(
counts,
project = "scRNA ROSMAP",
assay = "RNA",
names.field = 3,
names.delim = "_",
meta.data = pseudobulk_meta)
#get Ribo Protein percent
seurat_obj <- PercentageFeatureSet(seurat_obj, "^RP[SL]", col.name = "percent_ribo")
# Percentage hemoglobin genes - includes all genes starting with HB except HBP.
seurat_obj <- PercentageFeatureSet(seurat_obj, "^HB[^(P)]", col.name = "percent_hb")
#Does number of ribosoal features (%ribo * n_features) change with cogdx
RPSL.genes <- grep(pattern = "^RP[SL]", x = rownames(x = seurat_obj@assays$RNA$counts), value = TRUE)
counts.RPS <- Matrix::colSums(seurat_obj@assays$RNA$counts[RPSL.genes, ])
seurat_obj = AddMetaData(
object = seurat_obj,
metadata = counts.RPS,
col.name = "cnts_ribo"
)
# VlnPlot(seurat_obj, group.by = "cond_cogdx", features = c("cnts_ribo", "pmi"), pt.size = 0.1, ncol = 1, alpha = 0)
#plot QC mertrics
# feats <- c("nFeature_RNA", "nCount_RNA", "percent_ribo")
# VlnPlot(seurat_obj, group.by = "broadclass", features = feats, pt.size = 0.1, ncol = 2, alpha = 0.05) +
# NoLegend()
#creates a reference correlation matrix
refCor = getRefCor(species = "human", tissue = "pan", useEntrezGeneId = F)
get_subcluster_data = function(str){
expr = FetchData(seurat_obj, vars = "cluster")
tmp = seurat_obj[,grep(str, expr$cluster)]
cts <- AggregateExpression(tmp,
group.by = c("project_id"),
assays = 'RNA',
slot = "counts",
return.seurat = FALSE)
cts = cts$RNA[,na.exclude(match(rosmap_meta$projid, colnames(cts$RNA)))]
}
cts = get_subcluster_data("Ast.*")
#"Inh\\.2$|Inh\\.8$|Inh\\.11$|Inh\\.12$|Inh\\.13$"
#"Exc\\.5$|Exc\\.3$"
# "Ast\\.1$|Ast\\.2$|Ast\\.5$|Ast\\.6$|Ast\\.7$|Ast\\.8$"
# "Mic\\.4$|Mic\\.5$|Mic\\.6$|Mic\\.7$|Mic\\.8$|Mic\\.10$|Mic\\.11$|Mic\\.13$|Mic\\.15$|Mic\\.16$"
my_rosmap_meta = rosmap_meta[match(colnames(cts), rosmap_meta$projid), ]
#create DGElist
y <- DGEList(counts = cts, group = my_rosmap_meta$cond_cogdx)
#default params for filterByExpression
keep.genes = filterByExpr(y)
keep.genes[rownames(refCor)] = T #make sure genes needed for cormat are kept
#filter out the genes
y = y[keep.genes, , keep=FALSE]
my_tmm_DGE_obj <- calcNormFactors(y, method = "TMM")
my_tmm = cpm(my_tmm_DGE_obj) #calculate tmms: https://www.biostars.org/p/317701/
my_tmm = as.data.frame(my_tmm)
plotHeatmap(rownames(refCor), emat = as.data.frame(my_tmm), groupVec = my_rosmap_meta$cond_cogdx)
# rm_vars1 = rowSums(my_tmm[,my_rosmap_meta$cond_cogdx])
# rm_vars2 = rowSums(my_tmm[,!my_rosmap_meta$cond_cogdx])
# rm_rows = which(rm_vars1 == 0 | rm_vars2 == 0)
# keep_refCor = which(rownames(refCor) %in% rownames(my_tmm[-rm_rows,]))
# calcCCD(refCor[keep_refCor, keep_refCor], emat = as.data.frame(my_tmm[-rm_rows,]), groupVec = my_rosmap_meta$cond_cogdx)
# calcDeltaCCD(refCor[keep_refCor, keep_refCor], as.data.frame(my_tmm[-rm_rows,]), groupVec = my_rosmap_meta$cond_cogdx, groupNormal = 0)
calcCCD(refCor, emat = as.data.frame(my_tmm), groupVec = my_rosmap_meta$cond_cogdx)
calcDeltaCCD(refCor, as.data.frame(my_tmm), groupVec = my_rosmap_meta$cond_cogdx, groupNormal = 0)
CYCLOPS_seed_genes = c("DBP", "TEF", "ZNF580", "GFOD1", "CASTOR2", "ETV5", "FMNL1", "MAMLD1", "TM7SF2", "FPGS", "SYNJ2", "HLF", "KBTBD2", "MPP2", "MRGBP", "USP2", "CC2D1B", "GALNT9", "GSTT2B", "NR1D1", "SRSF5", "ZMAT3", "ARNTL", "FAM3A", "FOSL2", "HUNK", "MORN1", "NEXN", "SPHK2", "TRIM9", "ENC1", "GUF1", "IGFBP4", "PER2", "CRY1", "MRAS", "SFPQ", "ARRDC1", "CFAP46", "DNAJB1", "MKKS", "SARS2", "SEC14L1", "SETD4", "SLC6A6", "SPATA7", "TFR2", "PER1", "POR", "SLC16A1", "PER3", "NPAS2", "TSC22D3", "BHLHE41", "NR1D2", "LEO1", "STK35", "GRAMD4", "COQ10B", "DTX4", "PDZRN3", "DUSP11", "OPRL1", "LRRC39", "TRIM24", "RARA", "LDB1", "BHLHE40", "RSPO2", "TRAF5", "ANKRD12")
CYCLOPS_seed_genes = CYCLOPS_seed_genes[which(CYCLOPS_seed_genes %in% rownames(my_tmm))]
pc_res = prcomp(t(my_tmm), scale. = T)
pc_res_seeds = prcomp(t(my_tmm[CYCLOPS_seed_genes,]), scale. = T)
pc_res_rp = prcomp(t(my_tmm[grep("^RP[SL]", rownames(my_tmm)),]), scale. = T)
plot_pcs = function(pc_res, colorvec, title, continuous = F){
if(!continuous){colorvec = as.factor(colorvec)}
p1 = ggplot(as.data.frame(pc_res$x), aes(x = PC1, y = PC2, color = colorvec))+geom_point() + {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p2 = ggplot(as.data.frame(pc_res$x), aes(x = PC2, y = PC3, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p3 = ggplot(as.data.frame(pc_res$x), aes(x = PC1, y = PC3, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p4 = ggplot(as.data.frame(pc_res$x), aes(x = PC1, y = PC4, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p5 = ggplot(as.data.frame(pc_res$x), aes(x = PC2, y = PC4, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
p6 = ggplot(as.data.frame(pc_res$x), aes(x = PC3, y = PC4, color = colorvec))+geom_point()+ {if(continuous)scale_color_gradient(low = "blue", high = "red")}
grid.arrange(p1, p2, p3,p4,p5, p6, nrow = 3, top=textGrob(title,gp=gpar(fontsize=12,font=3)))
}
plot_pcs(pc_res, my_rosmap_meta$batch_bin, "PCA All Genes, Seq. Batch")
plot_pcs(pc_res_rp, my_rosmap_meta$batch_bin, "PCA Ribo Genes, Seq. Batch")
plot_pcs(pc_res_seeds, my_rosmap_meta$batch_bin, "PCA CYCLOPS Seed Genes, Seq. Batch")
plot_pcs(pc_res, my_rosmap_meta$msex, "PCA All Genes, Sex")
plot_pcs(pc_res_seeds, my_rosmap_meta$msex, "PCA CYCLOPS Seed Genes, Sex")
plot_pcs(pc_res_rp, my_rosmap_meta$msex, "PCA Ribo Genes, Sex")
plot_pcs(pc_res, my_rosmap_meta$pmi, "PCA All Genes, PMI", continuous = T)
plot_pcs(pc_res_seeds, my_rosmap_meta$pmi, "PCA CYCLOPS Seed Genes, PMI", continuous = T)
plot_pcs(pc_res_rp, my_rosmap_meta$pmi, "PCA Ribo Genes, PMI", T)
plot_pcs(pc_res, my_rosmap_meta$Study, "PCA All Genes, Study")
plot_pcs(pc_res_seeds, my_rosmap_meta$Study, "PCA CYCLOPS Seed Genes, Study")
plot_pcs(pc_res_rp, my_rosmap_meta$Study, "PCA Ribo Genes, Study")
library(sva)
#double check metadata is in order
all(my_rosmap_meta$projid== colnames(cts))
adjusted_counts <- ComBat_seq(as.matrix(cts), batch=my_rosmap_meta$batch_bin, group=my_rosmap_meta$cond_cogdx, covar_mod=NULL, full_mod=TRUE,shrink=FALSE, shrink.disp=FALSE, gene.subset.n=NULL)
all(colnames(cts) == (my_rosmap_meta$projid))
#create DGElist
y_combat <- DGEList(counts = adjusted_counts, group = my_rosmap_meta$cond_cogdx)
#default params for filterByExpression
keep.genes = filterByExpr(y_combat)
#filter out the genes
y_combat = y_combat[keep.genes, , keep=FALSE]
print(paste("keeping", dim(y_combat)[1], "genes"))
my_tmm_DGE_obj <- calcNormFactors(y_combat, method = "TMM")
my_tmm_combat = cpm(my_tmm_DGE_obj) #calculate tmms: https://www.biostars.org/p/317701/
my_tmm_combat = as.data.frame(my_tmm_combat)
all(colnames(my_tmm_combat) == (my_rosmap_meta$projid))
View(my_tmm)
setwd("../normed_counts/")
out = rownames_to_column(my_tmm_combat, var = "Gene_Symbols")
covs = c("Cond_D", paste0("cond_", my_rosmap_meta$cond))
covs1 = c("Batch_D", paste0("cond_", my_rosmap_meta$batch_bin))
covs1 = str_replace(covs1, "\\[10,64\\)", "0")
covs1 = str_replace(covs1, "\\[4,10\\)", "1")
covs2 = c("ceradsc_D", paste0("cond_",  my_rosmap_meta$ceradsc_bin))
covs3 = c("braaksc_D", paste0("cond_",  my_rosmap_meta$braaksc_bin))
covs4 = c("sex_D", paste0("cond_", my_rosmap_meta$msex))
#fill one missing pmi value to median of pmi's:
my_rosmap_meta$pmi[which(is.na(my_rosmap_meta$pmi))] = median(my_rosmap_meta$pmi, na.rm = T)
covs5 = c("pmi_C", my_rosmap_meta$pmi)
out = rbind(covs, covs1, covs2, covs3, covs4, covs5, out)
colnames(out) = str_replace(colnames(out), "X", "")
write.table(out, "ALL_Ast_FiltByExprDefault_TMM_CombatAdjusted.csv", sep = ',', row.names = F)
CYCLOPS_seed_genes = CYCLOPS_seed_genes[which(CYCLOPS_seed_genes %in% rownames(my_tmm_combat))]
pc_res = prcomp(t(my_tmm_combat), scale. = T)
pc_res_seeds = prcomp(t(my_tmm_combat[CYCLOPS_seed_genes,]), scale. = T)
plot_pcs(pc_res, my_rosmap_meta$batch_bin, "PCA All Genes, Seq. Batch")
plot_pcs(pc_res_seeds, my_rosmap_meta$batch_bin, "PCA CYCLOPS Seed Genes, Seq. Batch")
plot_pcs(pc_res, my_rosmap_meta$msex, "PCA All Genes, Sex")
plot_pcs(pc_res_seeds, my_rosmap_meta$msex, "PCA CYCLOPS Seed Genes, Sex")
plot_pcs(pc_res, my_rosmap_meta$pmi, "PCA All Genes, PMI", continuous = T)
plot_pcs(pc_res_seeds, my_rosmap_meta$pmi, "PCA CYCLOPS Seed Genes, PMI", continuous = T)
library(fuzzyjoin)
library(tidyverse)
library(stringr)
library(RColorBrewer)
plot_fgsea_vs_enrichr = function(enrichR_path, fgsea_path, title,  marker_color = "#000000", libname = "KEGG", fgsea_enrichment = "all", max.overlaps = 10, point_padding = 0.25, label_padding = 0.25, box_padding = 0.25){
tryCatch({
fgsea_res = read_csv(fgsea_path, show_col_types = F)
enrichR_res = read_csv(enrichR_path, show_col_types = F)
#make pathway names lowercase
enrichR_res$pathway = enrichR_res$`Term name` %>% tolower()
#replace hyphens with spaces
enrichR_res$pathway = str_replace(enrichR_res$pathway,pattern = "-", " ")
#fgsea may have multiple libraries in same file (i.e. Kegg and Hallmark), filter for only libname:
fgsea_res = filter(fgsea_res, grepl(libname, fgsea_res$pathway, ignore.case = T))
#remove the "KEGG_" prefix from fgsea results:
fgsea_res$pathway  = fgsea_res$pathway%>% str_replace("KEGG_", "") %>% str_replace_all("_", " ") %>% tolower()
plot_df = stringdist_join(enrichR_res, fgsea_res,
by = "pathway",
mode = "full",
ignore_case = T,
method = "lv",
max_dist = 1,
distance_col = "dist") %>%
group_by(pathway.x) %>%
slice_min(order_by = dist, n = 1) #only keep top match between fgsea and enrichR
plot_df = filter(plot_df, padj < 0.2 | `Adjusted p-value` < 0.2)
if(fgsea_enrichment == "all"){
print("Using pos and neg enrichment scores")
# Define the number of colors you want in the palette
num_colors = 15
# Create a red-to-blue color palette using RColorBrewer
color_palette = rev(colorRampPalette(brewer.pal(num_colors, "RdYlBu"))(num_colors))
p = ggplot(plot_df, aes(NES, -log10(`Adjusted p-value`), color = -log10(padj), label = str_to_title(pathway.x)))+
geom_point(shape = 16, size = 5, alpha = .7)+
ggrepel::geom_text_repel(max.overlaps = max.overlaps, color = "black", point.padding = point_padding, label.padding = label_padding, box.padding = box_padding )+
scale_x_reverse()+
xlim(0,-3.5)+
ggtitle(str_wrap(title, 25))+
theme_minimal()+
scale_color_gradientn(colors = color_palette, name = "fGSEA\n-Log(BH.q)")+
# geom_vline(xintercept = 0, linetype = "dashed", color = "grey")+
xlab("fGSEA NES")+
ylab(" EnrichR -Log(BH.q)")+
theme(
axis.text.x = element_text(size = 14),    # Increase x-axis text size
axis.text.y = element_text(size = 14),    # Increase y-axis text size
axis.title.x = element_text(size = 16),   # Increase x-axis title size
axis.title.y = element_text(size = 16),   # Increase y-axis title size
legend.title = element_text(size = 12)    # Increase legend title size
)
print(p)
return(plot_df)
}
if (fgsea_enrichment == "neg"){
print("Using only negative enrichment scores")
plot_df = filter(plot_df, ES < 0)
}else if(fgsea_enrichment == "pos"){
print("Using only positive enrichment scores")
plot_df = filter(plot_df, ES > 0)
}
p = ggplot(plot_df, aes(-log10(padj), -log10(`Adjusted p-value`), label = str_to_title(pathway.x)))+
geom_point(shape = 16, size = 5, alpha = .4, color = marker_color)+
ggrepel::geom_text_repel(max.overlaps = max.overlaps)+
xlab("-Log(fGSEA BH.q)")+
ylab("-Log(enrichR BH.q)")+
ggtitle(str_wrap(title, 25))+
theme_minimal()
print(p)
return(plot_df)
},
error = function(e){message(e)}
)
}
check_file = function(file_path){
# Check if the file exists
if (!file.exists(file_path)) {
print(paste("File", file_path, "does not exist."))
}
}
plot_cycling_and_dr_cycling= function(downstream_str){
setwd(paste0("../Cyclops_ordering/",downstream_str ))
#CONTRL is cycling
enrichR_cyclingBHQ1AR20_CTL = "enrichR_results/EnrichR_CTLcyclersAR20BHQ1_BCKGRND-EnrichRbackground/CTLcyclersAR20BHQ1_LIBRY-KEGG2021Human_BCKGRND-EnrichRbackground.csv"
check_file(enrichR_cyclingBHQ1AR20_CTL)
fgsea_CTL_cyclers_pranked = "fGSEA/fGSEA_results/CTL_cyclers_minusLogPRanked.csv"
check_file(fgsea_CTL_cyclers_pranked)
plot_fgsea_vs_enrichr(enrichR_cyclingBHQ1AR20_CTL, fgsea_CTL_cyclers_pranked, "Pathways Cycling in CTL (Cycling BHQ1 AR20)", fgsea_enrichment = "pos", marker_color = "#0091ff")
#AD is cycling
enrichR_cyclingBHQ1AR20_AD = "enrichR_results/EnrichR_ADcyclersAR20BHQ1_BCKGRND-EnrichRbackground/ADcyclersAR20BHQ1_LIBRY-KEGG2021Human_BCKGRND-EnrichRbackground.csv"
check_file(enrichR_cyclingBHQ1AR20_AD)
fgsea_AD_cyclers_pranked = "fGSEA/fGSEA_results/AD_cyclers_minusLogPRanked.csv"
check_file(fgsea_AD_cyclers_pranked)
plot_fgsea_vs_enrichr(enrichR_cyclingBHQ1AR20_AD, fgsea_AD_cyclers_pranked, "Pathways Cycing in AD (Cycling BHQ1 AR20)", fgsea_enrichment = "pos", marker_color = "red")
#AD gain cycling
enrichR_gainCycling_BHQ1AR20 = "enrichR_results/EnrichR_DRgainAmpADCyclingBHQ1AR20DRBHQ3_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio20/DRgainAmpADCyclingBHQ1AR20DRBHQ3_LIBRY-KEGG2021Human_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio20.csv"
check_file(enrichR_gainCycling_BHQ1AR20)
fgsea_AD_gain_cyclers25 = "fGSEA/fGSEA_results/DRgenesAmpRatio20_Log(AD-CTL)ranked.csv"
check_file(fgsea_AD_gain_cyclers25)
plot_fgsea_vs_enrichr(enrichR_gainCycling_BHQ1AR20, fgsea_AD_gain_cyclers25, "Pathways Gain Rhythmicity in AD (Cycling BHQ1 AR20)", fgsea_enrichment = "pos", marker_color = "#D81B60")
enrichR_gainCycling_BHQ1AR1 = "enrichR_results/EnrichR_DRgainAmpADCyclingBHQ1AR1DRBHQ3_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio1/DRgainAmpADCyclingBHQ1AR1DRBHQ3_LIBRY-KEGG2021Human_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio1.csv"
check_file(enrichR_gainCycling_BHQ1AR1)
fgsea_AD_gain_cyclers1 = "fGSEA/fGSEA_results/DRgenesAmpRatio1_Log(AD-CTL)ranked.csv"
check_file(fgsea_AD_gain_cyclers1)
plot_fgsea_vs_enrichr(enrichR_gainCycling_BHQ1AR1, fgsea_AD_gain_cyclers1, "Pathways Gain Rhythmicity in AD (Cycling BHQ1 AR1)", fgsea_enrichment = "pos",  marker_color = "#D81B60")
#AD lose cycling
enrichR_loseCycling_BHQ1AR20 = "enrichR_results/EnrichR_DRlostAmpADCyclingBHQ1AR20DRBHQ3_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio20/DRlostAmpADCyclingBHQ1AR20DRBHQ3_LIBRY-KEGG2021Human_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio20.csv"
check_file(enrichR_loseCycling_BHQ1AR20)
fgsea_AD_lose_cyclers25 = "fGSEA/fGSEA_results/DRgenesAmpRatio20_Log(AD-CTL)ranked.csv"
check_file(fgsea_AD_lose_cyclers25)
plot_fgsea_vs_enrichr(enrichR_loseCycling_BHQ1AR20, fgsea_AD_lose_cyclers25, "Pathways Lose Rhythmicity in AD (Cycling BHQ1 AR20)", fgsea_enrichment = "neg", marker_color = "#FE6100")
enrichR_loseCycling_BHQ1AR1 = "enrichR_results/EnrichR_DRlostAmpADCyclingBHQ1AR1DRBHQ3_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio1/DRlostAmpADCyclingBHQ1AR1DRBHQ3_LIBRY-KEGG2021Human_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio1.csv"
check_file(enrichR_loseCycling_BHQ1AR1)
fgsea_AD_lose_cyclers1 = "fGSEA/fGSEA_results/DRgenesAmpRatio1_Log(AD-CTL)ranked.csv"
check_file(fgsea_AD_lose_cyclers1)
plot_fgsea_vs_enrichr(enrichR_loseCycling_BHQ1AR1, fgsea_AD_lose_cyclers1, "Pathways Lose Rhythmicity in AD (Cycling BHQ1 AR1)", fgsea_enrichment = "neg", marker_color = "#FE6100")
#Both AD gain and lose on same plot
enrichR_DRCycling_BHQ1AR20 = "enrichR_results/EnrichR_DRcyclersCyclingBHQ1AR20DRBHQ3_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio20/DRcyclersCyclingBHQ1AR20DRBHQ3_LIBRY-KEGG2021Human_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio20.csv"
check_file(enrichR_DRCycling_BHQ1AR20)
fgsea_log_ad_ctl_amp = "fGSEA/fGSEA_results/DRgenesAmpRatio20_Log(AD-CTL)ranked.csv"
check_file(fgsea_log_ad_ctl_amp)
plot_fgsea_vs_enrichr(enrichR_DRCycling_BHQ1AR20, fgsea_log_ad_ctl_amp, "Differentially Rhythmic Pathways in AD (Cycling BHQ1 AR20)", fgsea_enrichment = "all")
enrichR_DRCycling_BHQ1AR1 = "enrichR_results/EnrichR_DRcyclersCyclingBHQ1AR1DRBHQ3_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio1/DRcyclersCyclingBHQ1AR1DRBHQ3_LIBRY-KEGG2021Human_BCKGRND-diffrhythmsCyclingBHQ1AmpRatio1.csv"
check_file(enrichR_DRCycling_BHQ1AR1)
fgsea_log_ad_ctl_amp = "fGSEA/fGSEA_results/DRgenesAmpRatio1_Log(AD-CTL)ranked.csv"
check_file(fgsea_log_ad_ctl_amp)
plot_fgsea_vs_enrichr(enrichR_DRCycling_BHQ1AR1, fgsea_log_ad_ctl_amp, "Differentially Rhythmic Pathways in AD (Cycling BHQ1AR1)", fgsea_enrichment = "all")
}
list.files("../Cyclops_ordering/", pattern = "downstream_output*")
plot_cycling_and_dr_cycling("downstream_output_Exc_All")
plot_cycling_and_dr_cycling("downstream_output_Exc_All")
setwd("~/Box Sync/Henry_stuff/AD_project/scROSMAP/scrosmap_covariate_fork/scROSMAP_project/Analysis_scripts/")
plot_cycling_and_dr_cycling("downstream_output_Exc_All")
