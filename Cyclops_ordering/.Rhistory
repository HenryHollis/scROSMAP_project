mutate(out_dirs = paste(str_extract(string = as.character(Var1),     pattern= ".+(?=\\.txt)"), basename(as.character(Var2)) %>% str_extract(pattern= ".+(?=\\.gmt)")%>%
gsub(pattern = "\\.", replacement = ""), sep = "_") )
#apply system call, calling PSEA jar file, using rows of arg_df as arguments
apply(arg_df, 1, function(a){
system(paste0("java -jar ", path_no_space, "/downstream_helpers/PSEA_cmd.jar ",
a[[1]], " ", a[[2]]," ", a[[3]], " 5 10000 pdf"))
})
entrez_dict = readxl::read_excel("downstream_helpers/scROSMAP_ENSEMBL_ENTREZ_dict.xlsx")
setwd(path_to_cyclops_ordering)
isCyclingBHQCutoff_str = str_extract(as.character(isCyclingBHQCutoff), "(?<=\\.)\\d+")
if (!(dir.exists("downstream_output/KEGG_map_diagrams"))){
dir.create("downstream_output/KEGG_map_diagrams")
}
write_kegg_map_files(paste0("downstream_output/diff_rhythms_CyclingBHQ", isCyclingBHQCutoff_str, "AmpRatio20.csv"),"Log_AD_CTL_ampRatio", trans_dict = entrez_dict,BHQ_cutoff = 0.2)
path = getwd()
setwd(path_to_cyclops_ordering)
abs_path_cyclops_ordering = getwd()
setwd(path)
#create pscan dir if does not exist:
if(!(dir.exists(paste0(path_to_cyclops_ordering, "downstream_output/pscan")))){
dir.create(paste0(path_to_cyclops_ordering, "downstream_output/pscan") )
}
setwd(paste0(path_to_cyclops_ordering, "downstream_output"))
#grab gene lists from enrichR files directory
gene_lists = list.files("./enrichR_files/", pattern = "^(CTL_|AD_|DR_)")
#write pscan input
lapply(gene_lists, write_pscan_input)
path_no_space = gsub(" ", "\\ ", path, fixed = TRUE)
setwd("pscan/")
pscan_files = list.files("./pscan_files/", pattern = ".csv$")
sapply(pscan_files, function(x){
system(paste0("python3 ", path_no_space, "/downstream_helpers/pscan_requests.py --file pscan_files/" ,x))})
isCyclingBHQCutoff_str = str_extract(as.character(isCyclingBHQCutoff), "(?<=\\.)\\d+")
if(exists("edgeR_de_filename")){
setwd("pscan_results")
pscan_result_files = list.files(pattern = ".csv$")
print("Searching cycling and DR results for pscan TF")
sapply(pscan_result_files, augment_tf_file, edgeR_de_filename, isCyclingBHQCutoff_str, abs_path_cyclops_ordering)
setwd(paste0(abs_path_cyclops_ordering, "/downstream_output/enrichR_results"))
directories = list.files()
enrichR_TF_paths <- lapply(directories, function(dir) list.files(dir, full.names = TRUE, recursive = TRUE, pattern = ".*TRANSFACandJASPARPWMs_BCKGRND.*\\.csv|.*TranscriptionFactorPPIs_BCKGRND.*\\.csv"))
enrichR_TF_paths = flatten(enrichR_TF_paths) %>% paste0("./", .)
sapply(enrichR_TF_paths, augment_tf_file, edgeR_de_filename, isCyclingBHQCutoff_str, abs_path_cyclops_ordering)
}
library(reticulate) #use to find conda env for python
library(tidyverse)
source("./downstream_helpers/differential_rhyth_generalized.R")
source("./downstream_helpers/create_rnk_files.R")
source("./downstream_helpers/fgsea.R")
source("./downstream_helpers/Files_for_Pscan.R")
source("./downstream_helpers/Make_KEGG_map_files.R")
source("./downstream_helpers/Check_TF_for_cycling_or_DR.R")
source("./downstream_helpers/plot_clock_face_plots.R")
source("./downstream_helpers/plot_gene_traces_generalized.R")
source("./downstream_helpers/order_metabolon.R")
source("./downstream_helpers/order_proteomics.R")
conda_list()
conda_list()[[2]][2] %>%
use_condaenv(required = TRUE)
print(paste("Using cond env:",conda_list()[[1]][2] ))
#path to cyclops ordering
path_to_cyclops_ordering = "../Cyclops_ordering/"
#path to normalized counts
path_to_tmm_file = "../normed_counts/Microglia_4_5_6_7_8_10_11_13_15_16_FiltByExprDefault_TMM.csv"
# optional path to file containing differential expression results
edgeR_de_filename = "../edgeR_diff_expression/Mglia_4_5_6_7_8_10_11_13_15_16/Mglia_4_5_6_7_8_10_11_13_15_16_filtByExpr_edgeR_DE_QLFTest.csv"
path_to_rosmap_clin = "../ROSMAP_metadata/cleaned_rosmap_meta_cogdxConds.csv"
metabolon_filename = "../metabolic_data/ROSMAP_Metabolon_HD4_Brain514_assay_data.csv"
metabolon_datakey = "../metabolic_data/ROSMAP_Metabolon_HD4_Data_Dictionary.csv"
#BHQ corrected p cutoff to be considered cycling in analysis:
isCyclingBHQCutoff = 0.1
percentile = 0.
useBatch = T
# read in translation dict between gene symbols and other alias
Ensembl_dict = readxl::read_xlsx("downstream_helpers/scROSMAP_ENSEMBL_dict.xlsx")
#Register parallel backend:
registerDoParallel(cores=8)
#run custom cycling and differential rhythmicity analysis
print("***Running cosinor and differential rhythms analysis***")
run_cycling_and_dr_analysis(path_to_cyclops_ordering, path_to_tmm_file, isCyclingSigCutoff = isCyclingBHQCutoff, percentile = percentile, useBatch = useBatch)
setwd(path_to_cyclops_ordering)
if (!(dir.exists("downstream_output/plots"))){
dir.create("downstream_output/plots")
}
#for cycling_in_CTL.csv
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output/plots/CTL_clock_face_plot.png"), "downstream_output/cosinor_results_CTL.csv", mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0, force_align = 6.03, force_flipped = T)
#Force_align is to make the CTL_clock_face plot have ARNTL at top
setwd(path_to_cyclops_ordering)
#for cycling_in_AD.csv
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output/plots/AD_clock_face_plot.png"),"downstream_output/cosinor_results_AD.csv",mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0, force_align = 6.03, force_flipped = T)
#plot cyclops histogram
plot_subject_histogram(path_to_cyclops_ordering, "cond_0")
plot_subject_histogram(path_to_cyclops_ordering, "cond_1")
#Gene Tracings
genelist = c("ARNTL", "NPAS2", "CLOCK", "CRY1", "CRY2", "NR1D1", "NR1D2", "PER1", "PER2", "PER3", "DBP", "TEF")
plot_genes(path_to_tmm_file, path_to_cyclops_ordering,genelist, useBatch = useBatch, percentile = percentile, split_cond_plots = T)
plot_me = c("RPL18","RPS7","RPL22","RPS18","RPL8","RPL10A","RPS13","RPL14","RPS15A","RPS12","RPL36AL","RPL34","RPL30","RPL9","RPL21","RPS28","RPSA","RPL26","RPL27A","FAU","RPS3A","RPL7A","RPL17","RPS27A","RPS16","RPL15","RPLP1","RPL7","RPL10","RPL23A","RPL18A","RPL3","RPL12","RPL39","RPL37A","RPL37","RPS10","RPL13","RPL35A","RPS23","RPL13A","RPL38","RPS29","RPL24","RPL41","RPL35","RPS26","RPS2","RPS9","RPL32","RPL6","RPS21","RPS24","RPS25","RPL36","RPL19","RPS27","RPL29","RPS15","RPS3","RPS5","RPS8","RPL27","RSL24D1","RPS6","RPL11")
plot_genes(path_to_tmm_file, path_to_cyclops_ordering,plot_me, useBatch = useBatch, percentile = percentile, split_cond_plots = T)
path = getwd()
setwd(paste0(path_to_cyclops_ordering, "downstream_output"))
path_no_space = gsub(" ", "\\ ", path, fixed = TRUE)
#create list of filenames from the enrichR_files subfolder
gene_lists = list.files("./enrichR_files/", pattern = "^(CTL_|AD_|diff_mesor)")
#run system command to call python script that uses enrichR API
sapply(gene_lists, function(x){
system(paste0("python3 ", path_no_space, "/downstream_helpers/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/" ,x, "\" -b \"enrichR_files/EnrichR_background.csv\""))})
isCyclingBHQCutoff_str = str_extract(as.character(isCyclingBHQCutoff), "(?<=\\.)\\d+")
setwd("enrichR_files/")
all_DR_gene_lists = list.files( pattern = "^(DR_)")
method2_files = grepl("mthd2", all_DR_gene_lists)
DR_gene_lists_method1 = all_DR_gene_lists[!method2_files]
DR_backgrounds_method1 = paste0("diff_rhythms_CyclingBHQ", isCyclingBHQCutoff_str, "AmpRatio", str_replace(str_extract(DR_gene_lists_method1, pattern = "AR\\d+"), "AR", ""), ".csv")
DR_gene_lists_method2 = all_DR_gene_lists[method2_files]
DR_backgrounds_method2 = paste0("diff_rhythms_method2_CyclingBHQ", isCyclingBHQCutoff_str, "AmpRatio", str_replace(str_extract(DR_gene_lists_method2, pattern = "AR\\d+"), "AR", ""), ".csv")
DR_gene_lists = c(DR_gene_lists_method1, DR_gene_lists_method2)
DR_backgrounds = c(DR_backgrounds_method1, DR_backgrounds_method2)
# repeat with differential gene lists
setwd("..")
mapply(function(x, y){
system(paste0("python3 ", path_no_space, "/downstream_helpers/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/" ,x, "\" -b \"",y , "\""))},
DR_gene_lists,
DR_backgrounds)
#AD severity
system(paste0("python3 ", path_no_space, "/downstream_helpers/Python_EnrichR_for_AnalysisPipeline.py -g \"enrichR_files/strong_cogdx_diffs_AR20.csv\" -b \"enrichR_files/AD_cyclers_AR20BHQ1.csv\""))
path = getwd()
setwd(path_to_cyclops_ordering)
if (!(dir.exists("downstream_output/fGSEA"))){
dir.create("downstream_output/fGSEA")
dir.create("downstream_output/fGSEA/rnk_files")
dir.create("downstream_output/fGSEA/fGSEA_results")
dir.create("downstream_output/fGSEA/fGSEA_results/plots")
}
isCyclingBHQCutoff_str = str_extract(as.character(isCyclingBHQCutoff), "(?<=\\.)\\d+")
#create rnk files
write_rnks(path_to_cyclops_ordering, isCyclingBHQCutoff_str)
#path of parent folder
setwd(path)
#Pathways, downloaded from MsigDB
pathways <- c(gmtPathways("./MsigDB_gmts_for_GSEA/c2.cp.kegg.v2023.1.Hs.symbols.gmt"), gmtPathways("./MsigDB_gmts_for_GSEA/h.all.v2023.1.Hs.symbols.gmt"))
gene_remapping_dict = read.delim("./MsigDB_gmts_for_GSEA/Human_Gene_Symbol_with_Remapping_MSigDB.v2023.1.Hs.chip", sep = '\t')
setwd(paste(path_to_cyclops_ordering,"downstream_output", "fGSEA", "rnk_files", sep = "/"))
rnk_files = list.files(pattern = ".rnk")
run_fgsea(rnk_files, gene_remapping_dict, pathways)
sleep_wake_pathways = gmtPathways("./MsigDB_gmts_for_GSEA/sleep_wake_pathways_w_all_human_aliases_filtered_to_background_genes.gmt")
if(!(dir.exists(paste0(path_to_cyclops_ordering, "downstream_output/fGSEA/fGSEA_results_sleep_wake")))){
dir.create(paste0(path_to_cyclops_ordering,"downstream_output/fGSEA/fGSEA_results_sleep_wake"))
dir.create(paste0(path_to_cyclops_ordering,"downstream_output/fGSEA/fGSEA_results_sleep_wake/plots"))
}
setwd(paste0(path_to_cyclops_ordering,"downstream_output/fGSEA/rnk_files"))
run_fgsea(rnk_files, gene_remapping_dict, sleep_wake_pathways, dir = "fGSEA_results_sleep_wake", max_size = 10000)
path = getwd()
path_no_space = gsub(" ", "\\ ", path, fixed = TRUE)
# List of pathways, downloaded from MsigDB, absolute paths
psea_pathways <- c(paste0(getwd(), "/MsigDB_gmts_for_GSEA/c2.cp.kegg.v2023.1.Hs.symbols.gmt"), paste0(getwd(), "/MsigDB_gmts_for_GSEA/h.all.v2023.1.Hs.symbols.gmt"))
# make sure no spaces when calling cmd
psea_pathways = gsub(" ", "\\ ", psea_pathways, fixed = TRUE)
# change dir into PSEA directory
setwd("../Cyclops_ordering/downstream_output/PSEA_files/")
#list PSEA input files (generated during cosinor regression/DR step)
psea_files = list.files(pattern = "*.txt")
#dataframe where rows are arguments to system, I will apply system call across rows
arg_df = expand.grid(psea_files, psea_pathways) %>%
mutate(out_dirs = paste(str_extract(string = as.character(Var1),     pattern= ".+(?=\\.txt)"), basename(as.character(Var2)) %>% str_extract(pattern= ".+(?=\\.gmt)")%>%
gsub(pattern = "\\.", replacement = ""), sep = "_") )
#apply system call, calling PSEA jar file, using rows of arg_df as arguments
apply(arg_df, 1, function(a){
system(paste0("java -jar ", path_no_space, "/downstream_helpers/PSEA_cmd.jar ",
a[[1]], " ", a[[2]]," ", a[[3]], " 5 10000 pdf"))
})
entrez_dict = readxl::read_excel("downstream_helpers/scROSMAP_ENSEMBL_ENTREZ_dict.xlsx")
setwd(path_to_cyclops_ordering)
isCyclingBHQCutoff_str = str_extract(as.character(isCyclingBHQCutoff), "(?<=\\.)\\d+")
if (!(dir.exists("downstream_output/KEGG_map_diagrams"))){
dir.create("downstream_output/KEGG_map_diagrams")
}
write_kegg_map_files(paste0("downstream_output/diff_rhythms_CyclingBHQ", isCyclingBHQCutoff_str, "AmpRatio20.csv"),"Log_AD_CTL_ampRatio", trans_dict = entrez_dict,BHQ_cutoff = 0.2)
path = getwd()
setwd(path_to_cyclops_ordering)
abs_path_cyclops_ordering = getwd()
setwd(path)
#create pscan dir if does not exist:
if(!(dir.exists(paste0(path_to_cyclops_ordering, "downstream_output/pscan")))){
dir.create(paste0(path_to_cyclops_ordering, "downstream_output/pscan") )
}
setwd(paste0(path_to_cyclops_ordering, "downstream_output"))
#grab gene lists from enrichR files directory
gene_lists = list.files("./enrichR_files/", pattern = "^(CTL_|AD_|DR_)")
#write pscan input
lapply(gene_lists, write_pscan_input)
path_no_space = gsub(" ", "\\ ", path, fixed = TRUE)
setwd("pscan/")
pscan_files = list.files("./pscan_files/", pattern = ".csv$")
sapply(pscan_files, function(x){
system(paste0("python3 ", path_no_space, "/downstream_helpers/pscan_requests.py --file pscan_files/" ,x))})
isCyclingBHQCutoff_str = str_extract(as.character(isCyclingBHQCutoff), "(?<=\\.)\\d+")
if(exists("edgeR_de_filename")){
setwd("pscan_results")
pscan_result_files = list.files(pattern = ".csv$")
print("Searching cycling and DR results for pscan TF")
sapply(pscan_result_files, augment_tf_file, edgeR_de_filename, isCyclingBHQCutoff_str, abs_path_cyclops_ordering)
setwd(paste0(abs_path_cyclops_ordering, "/downstream_output/enrichR_results"))
directories = list.files()
enrichR_TF_paths <- lapply(directories, function(dir) list.files(dir, full.names = TRUE, recursive = TRUE, pattern = ".*TRANSFACandJASPARPWMs_BCKGRND.*\\.csv|.*TranscriptionFactorPPIs_BCKGRND.*\\.csv"))
enrichR_TF_paths = flatten(enrichR_TF_paths) %>% paste0("./", .)
sapply(enrichR_TF_paths, augment_tf_file, edgeR_de_filename, isCyclingBHQCutoff_str, abs_path_cyclops_ordering)
}
View(write_pscan_input)
setwd("~/Box Sync/Henry_stuff/AD_project/scROSMAP/scrosmap_covariate_fork/scROSMAP_project/Cyclops_ordering/")
#for cycling_in_CTL.csv
plot_clock_face("~/Desktop/mglia_all_clock_face_AR1.png", "downstream_output/cosinor_results_CTL.csv", mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0.1, force_align = 6.03, force_flipped = T)
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output/plots/CTL_clock_face_plot_AR1.png"), "downstream_output/cosinor_results_CTL.csv", mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0, force_align = 6.03, force_flipped = T)
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output/plots/AD_clock_face_plot_AR1.png"),"downstream_output/cosinor_results_AD.csv",mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0.1, force_align = 6.03, force_flipped = T)
library(reticulate) #use to find conda env for python
library(tidyverse)
source("./downstream_helpers/differential_rhyth_generalized.R")
source("./downstream_helpers/create_rnk_files.R")
source("./downstream_helpers/fgsea.R")
source("./downstream_helpers/Files_for_Pscan.R")
source("./downstream_helpers/Make_KEGG_map_files.R")
source("./downstream_helpers/Check_TF_for_cycling_or_DR.R")
source("./downstream_helpers/plot_clock_face_plots.R")
source("./downstream_helpers/plot_gene_traces_generalized.R")
source("./downstream_helpers/order_metabolon.R")
source("./downstream_helpers/order_proteomics.R")
#path to cyclops ordering
path_to_cyclops_ordering = "../Cyclops_ordering/"
#path to normalized counts
path_to_tmm_file = "../normed_counts/ALL_Mic_FiltByExprDefault_TMM.csv"
# optional path to file containing differential expression results
edgeR_de_filename = "../edgeR_diff_expression/All_Mglia/All_Mic_filtByExpr_edgeR_DE_QLFTest.csv"
path_to_rosmap_clin = "../ROSMAP_metadata/cleaned_rosmap_meta_cogdxConds.csv"
metabolon_filename = "../metabolic_data/ROSMAP_Metabolon_HD4_Brain514_assay_data.csv"
metabolon_datakey = "../metabolic_data/ROSMAP_Metabolon_HD4_Data_Dictionary.csv"
#BHQ corrected p cutoff to be considered cycling in analysis:
isCyclingBHQCutoff = 0.1
percentile = 0.
useBatch = T
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output_Mglia_All/plots/CTL_clock_face_plot.png"), "downstream_output_Mglia_All/cosinor_results_CTL.csv", mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0.1, force_align = 6.03, force_flipped = T)
#Force_align is to make the CTL_clock_face plot have ARNTL at top
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output_Mglia_All/plots/CTL_clock_face_plot.png"), "downstream_output_Mglia_All/cosinor_results_CTL.csv", mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0, force_align = 6.03, force_flipped = T)
#Force_align is to make the CTL_clock_face plot have ARNTL at top
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output_Mglia_All/plots/CTL_clock_face_plot_AR1.png"), "downstream_output_Mglia_All/cosinor_results_CTL.csv", mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0.1, force_align = 6.03, force_flipped = T)
#Force_align is to make the CTL_clock_face plot have ARNTL at top
#for cycling_in_AD.csv
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output_Mglia_All/plots/AD_clock_face_plot_AR1.png"),"downstream_output_Mglia_All/cosinor_results_AD.csv",mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0.1, force_align = 6.03, force_flipped = T)
library(reticulate) #use to find conda env for python
library(tidyverse)
source("./downstream_helpers/differential_rhyth_generalized.R")
source("./downstream_helpers/create_rnk_files.R")
source("./downstream_helpers/fgsea.R")
source("./downstream_helpers/Files_for_Pscan.R")
source("./downstream_helpers/Make_KEGG_map_files.R")
source("./downstream_helpers/Check_TF_for_cycling_or_DR.R")
source("./downstream_helpers/plot_clock_face_plots.R")
source("./downstream_helpers/plot_gene_traces_generalized.R")
source("./downstream_helpers/order_metabolon.R")
source("./downstream_helpers/order_proteomics.R")
#for cycling_in_CTL.csv
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output_Ast_1_2_5_6_7_8/plots/CTL_clock_face_plot_AR1.png"),
"downstream_output_Ast_1_2_5_6_7_8/cosinor_results_CTL.csv",
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
isCyclingBHQCutoff = 0.1
#for cycling_in_CTL.csv
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output_Ast_1_2_5_6_7_8/plots/CTL_clock_face_plot_AR1.png"),
"downstream_output_Ast_1_2_5_6_7_8/cosinor_results_CTL.csv",
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
postfix = "_Ast_1_2_5_6_7_8"
paste0( "/downstream_output", postfix, "/plots/CTL_clock_face_plot_AR1.png")
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv")
paste0("/downstream_output", postfix, "/plots/AD_clock_face_plot_AR1.png")
paste0("downstream_output", postfix, "/cosinor_results_AD.csv")
isCyclingBHQCutoff = 0.1
postfix = "_Ast_1_2_5_6_7_8"
#for cycling_in_CTL.csv
plot_clock_face(paste0( "/downstream_output", postfix, "/plots/CTL_clock_face_plot_AR1.png"),
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
#for cycling_in_AD.csv
plot_clock_face(paste0("/downstream_output", postfix, "/plots/AD_clock_face_plot_AR1.png"),
paste0("downstream_output", postfix, "/cosinor_results_AD.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
#for cycling_in_CTL.csv
plot_clock_face(paste0( "./downstream_output", postfix, "/plots/CTL_clock_face_plot_AR1.png"),
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
#for cycling_in_AD.csv
plot_clock_face(paste0("./downstream_output", postfix, "/plots/AD_clock_face_plot_AR1.png"),
paste0("downstream_output", postfix, "/cosinor_results_AD.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
isCyclingBHQCutoff = 0.1
postfix = "_Inhib_2_8_11_12_13"
#for cycling_in_CTL.csv
plot_clock_face(paste0( "./downstream_output", postfix, "/plots/CTL_clock_face_plot_AR1.png"),
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
#for cycling_in_AD.csv
plot_clock_face(paste0("./downstream_output", postfix, "/plots/AD_clock_face_plot_AR1.png"),
paste0("downstream_output", postfix, "/cosinor_results_AD.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
isCyclingBHQCutoff = 0.1
postfix = "_Ast_All"
#for cycling_in_CTL.csv
plot_clock_face(paste0( "./downstream_output", postfix, "/plots/CTL_clock_face_plot_AR1.png"),
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
#for cycling_in_AD.csv
plot_clock_face(paste0("./downstream_output", postfix, "/plots/AD_clock_face_plot_AR1.png"),
paste0("downstream_output", postfix, "/cosinor_results_AD.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
isCyclingBHQCutoff = 0.1
postfix = "_Inhib_All"
#for cycling_in_CTL.csv
plot_clock_face(paste0( "./downstream_output", postfix, "/plots/CTL_clock_face_plot_AR1.png"),
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
#for cycling_in_AD.csv
plot_clock_face(paste0("./downstream_output", postfix, "/plots/AD_clock_face_plot_AR1.png"),
paste0("downstream_output", postfix, "/cosinor_results_AD.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
isCyclingBHQCutoff = 0.1
postfix = "_Exc3_5"
#for cycling_in_CTL.csv
plot_clock_face(paste0( "./downstream_output", postfix, "/plots/CTL_clock_face_plot_AR1.png"),
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
#for cycling_in_AD.csv
plot_clock_face(paste0("./downstream_output", postfix, "/plots/AD_clock_face_plot_AR1.png"),
paste0("downstream_output", postfix, "/cosinor_results_AD.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
isCyclingBHQCutoff = 0.1
postfix = "_Exc_All"
#for cycling_in_CTL.csv
plot_clock_face(paste0( "./downstream_output", postfix, "/plots/CTL_clock_face_plot_AR1.png"),
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
#for cycling_in_AD.csv
plot_clock_face(paste0("./downstream_output", postfix, "/plots/AD_clock_face_plot_AR1.png"),
paste0("downstream_output", postfix, "/cosinor_results_AD.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 6.03,
force_flipped = T)
library(reticulate) #use to find conda env for python
library(tidyverse)
source("./downstream_helpers/differential_rhyth_generalized.R")
source("./downstream_helpers/create_rnk_files.R")
source("./downstream_helpers/fgsea.R")
source("./downstream_helpers/Files_for_Pscan.R")
source("./downstream_helpers/Make_KEGG_map_files.R")
source("./downstream_helpers/Check_TF_for_cycling_or_DR.R")
source("./downstream_helpers/plot_clock_face_plots.R")
source("./downstream_helpers/plot_gene_traces_generalized.R")
source("./downstream_helpers/order_metabolon.R")
source("./downstream_helpers/order_proteomics.R")
conda_list()
conda_list()[[2]][2] %>%
use_condaenv(required = TRUE)
print(paste("Using cond env:",conda_list()[[1]][2] ))
# read in translation dict between gene symbols and other alias
Ensembl_dict = readxl::read_xlsx("downstream_helpers/scROSMAP_ENSEMBL_dict.xlsx")
#Register parallel backend:
# registerDoParallel(cores=8)
#run custom cycling and differential rhythmicity analysis
print("***Running cosinor and differential rhythms analysis***")
run_cycling_and_dr_analysis(path_to_cyclops_ordering, path_to_tmm_file, isCyclingSigCutoff = isCyclingBHQCutoff, percentile = percentile, useBatch = useBatch)
library(reticulate) #use to find conda env for python
library(tidyverse)
source("./downstream_helpers/differential_rhyth_generalized.R")
source("./downstream_helpers/create_rnk_files.R")
source("./downstream_helpers/fgsea.R")
source("./downstream_helpers/Files_for_Pscan.R")
source("./downstream_helpers/Make_KEGG_map_files.R")
source("./downstream_helpers/Check_TF_for_cycling_or_DR.R")
source("./downstream_helpers/plot_clock_face_plots.R")
source("./downstream_helpers/plot_gene_traces_generalized.R")
source("./downstream_helpers/order_metabolon.R")
source("./downstream_helpers/order_proteomics.R")
conda_list()
conda_list()[[2]][2] %>%
use_condaenv(required = TRUE)
print(paste("Using cond env:",conda_list()[[1]][2] ))
#path to cyclops ordering
path_to_cyclops_ordering = "../Cyclops_ordering/"
#path to normalized counts
path_to_tmm_file = "../normed_counts/ALL_Exc_FiltByExprDefault_TMM.csv"
# optional path to file containing differential expression results
edgeR_de_filename = "../edgeR_diff_expression/All_Exc/All_Exc_filtByExpr_edgeR_DE_QLFTest.csv"
path_to_rosmap_clin = "../ROSMAP_metadata/cleaned_rosmap_meta_cogdxConds.csv"
metabolon_filename = "../metabolic_data/ROSMAP_Metabolon_HD4_Brain514_assay_data.csv"
metabolon_datakey = "../metabolic_data/ROSMAP_Metabolon_HD4_Data_Dictionary.csv"
#BHQ corrected p cutoff to be considered cycling in analysis:
isCyclingBHQCutoff = 0.1
percentile = 0.
useBatch = T
# read in translation dict between gene symbols and other alias
Ensembl_dict = readxl::read_xlsx("downstream_helpers/scROSMAP_ENSEMBL_dict.xlsx")
#Register parallel backend:
# registerDoParallel(cores=8)
#run custom cycling and differential rhythmicity analysis
print("***Running cosinor and differential rhythms analysis***")
run_cycling_and_dr_analysis(path_to_cyclops_ordering, path_to_tmm_file, isCyclingSigCutoff = isCyclingBHQCutoff, percentile = percentile, useBatch = useBatch)
setwd(path_to_cyclops_ordering)
if (!(dir.exists("downstream_output/plots"))){
dir.create("downstream_output/plots")
}
#for cycling_in_CTL.csv
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output/plots/CTL_clock_face_plot.png"), "downstream_output/cosinor_results_CTL.csv", mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0, force_align = 6.03, force_flipped = T)
#Force_align is to make the CTL_clock_face plot have ARNTL at top
setwd(path_to_cyclops_ordering)
#for cycling_in_AD.csv
plot_clock_face(paste0(path_to_cyclops_ordering, "/downstream_output/plots/AD_clock_face_plot.png"),"downstream_output/cosinor_results_AD.csv",mouse_data = mouse_data, BHQ_cutoff = isCyclingBHQCutoff, amp_ratio_cutoff = 0, force_align = 6.03, force_flipped = T)
#plot cyclops histogram
plot_subject_histogram(path_to_cyclops_ordering, "cond_0")
plot_subject_histogram(path_to_cyclops_ordering, "cond_1")
#Gene Tracings
genelist = c("ARNTL", "NPAS2", "CLOCK", "CRY1", "CRY2", "NR1D1", "NR1D2", "PER1", "PER2", "PER3", "DBP", "TEF")
plot_genes(path_to_tmm_file, path_to_cyclops_ordering,genelist, useBatch = useBatch, percentile = percentile, split_cond_plots = T)
isCyclingBHQCutoff = 0.1
postfix = "_Exc_All"
#for cycling_in_CTL.csv
plot_clock_face(paste0( "./downstream_output", postfix, "/plots/CTL_clock_face_plot_AR1.png"),
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 5.38483587334368,
force_flipped = T)
#for cycling_in_AD.csv
plot_clock_face(paste0("./downstream_output", postfix, "/plots/AD_clock_face_plot_AR1.png"),
paste0("downstream_output", postfix, "/cosinor_results_AD.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.1,
force_align = 5.38483587334368,
force_flipped = T)
#for cycling_in_CTL.csv
plot_clock_face(paste0( "./downstream_output", postfix, "/plots/CTL_clock_face_plot.png"),
paste0("downstream_output",postfix, "/cosinor_results_CTL.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.,
force_align = 5.38483587334368,
force_flipped = T)
#for cycling_in_AD.csv
plot_clock_face(paste0("./downstream_output", postfix, "/plots/AD_clock_face_plot.png"),
paste0("downstream_output", postfix, "/cosinor_results_AD.csv"),
mouse_data = mouse_data,
BHQ_cutoff = isCyclingBHQCutoff,
amp_ratio_cutoff = 0.,
force_align = 5.38483587334368,
force_flipped = T)
